[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624 Geospatial Analytics Applications",
    "section": "",
    "text": "In this Webpage, I am going to share with you my learning journey of geospatial analytics"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My learning journey of geospatial analytics"
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to handle geospatial data in R by using sf package.\nBy the end of this hands-on exercise, you should acquire the following competencies:\n\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nIn this hands-on exercise, the following packages will be used:\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\n\npackages = c('sf', 'tidyverse')\n\nfor (p in packages){\n\nif(!require(p, character.only = T)){\n\ninstall.packages(p)\n\n}\n\nlibrary(p,character.only = T)\n\n}\n\nLoading required package: sf\n\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\nImporting polygon feature data in shapefile format\n\nmpsz = st_read(dsn = \"hands-on_ex1/data/geospatial\",\n\nlayer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\Shumin\\Documents\\Documents Files\\Learning\\SMU\\ISSS624 Applied Geospatial Analytics\\shumin86718\\ISSS624\\hands-on_ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nImporting polyline feature data in shapefile form\n\ncyclingpath = st_read(dsn = \"hands-on_ex1/data/geospatial\",\n\nlayer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `C:\\Users\\Shumin\\Documents\\Documents Files\\Learning\\SMU\\ISSS624 Applied Geospatial Analytics\\shumin86718\\ISSS624\\hands-on_ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\nImporting GIS data in kml format\n\npreschool = st_read(\"hands-on_ex1/data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\Shumin\\Documents\\Documents Files\\Learning\\SMU\\ISSS624 Applied Geospatial Analytics\\shumin86718\\ISSS624\\hands-on_ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\nChecking the Content of A Simple Feature Data Frame\n\nWorking with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n\n\n\n\nWorking with glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\nWorking with head()\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n\n\n\nPlotting the Geospatial Data\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\nWorking with Projection\n\nAssigning EPSG code to a simple feature data frame\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransforming the projection of preschool from wgs84 to svy21.\n\npreschool3414 <- st_transform(preschool,\n\ncrs = 3414)\n\n\nst_geometry(preschool3414)\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (19997.26 32333.17 0)\n\n\nPOINT Z (19126.75 33114.35 0)\n\n\nPOINT Z (20345.12 31934.56 0)\n\n\nPOINT Z (20400.31 31952.36 0)\n\n\nPOINT Z (19810.78 33140.31 0)\n\n\n\n\n\nImporting and Converting An Aspatial Data\n\nImporting the aspatial data\n\nlistings <- read_csv(\"hands-on_ex1/data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\n\n\nCreating a simple feature data frame from an aspatial data frame\n\nlistings_sf <- st_as_sf(listings,\n\ncoords = c(\"longitude\", \"latitude\"),\n\ncrs=4326) %>%\n\nst_transform(crs = 3414)\n\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\n\n\n\nGeoprocessing with sf package\n\nBuffering\n\nbuffer_cycling <- st_buffer(cyclingpath,\n\ndist=5, nQuadSegs = 30)\n\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\nPoint-in-polygon count\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\n\nmpsz3414$Area <- mpsz3414 %>%\n\nst_area()\n\n\nmpsz3414 <- mpsz3414 %>%\n\nmutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\n\n\nExplorotary Data Analysis (EDA)\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nhistogram\n\nggplot(data=mpsz3414,\n\naes(x= as.numeric(`PreSch Density`)))+\n\ngeom_histogram(bins=20,\n\ncolor=\"black\",\n\nfill=\"light blue\") +\n\nlabs(title = \"Are pre-school even distributed in Singapore?\",\n\nsubtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n\nx = \"Pre-school density (per km sq)\",\n\ny = \"Frequency\")\n\n\n\n\n\n\nscatter plot\n\nggplot(data=mpsz3414,\n\naes(x= as.numeric(`PreSch Density`), y= as.numeric(`PreSch Count`)))+\n\ngeom_point() +\n\nlabs(title = \"Are pre-school even distributed in Singapore?\",\n\nsubtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n\nx = \"Pre-school density (per km sq)\",\n\ny = \"Pre-school Count\")"
  },
  {
    "objectID": "Hands-on_Ex1.html#geospatial-data-wrangling-with-r",
    "href": "Hands-on_Ex1.html#geospatial-data-wrangling-with-r",
    "title": "Hands-on Exercise 1",
    "section": "1  Geospatial Data Wrangling with R",
    "text": "1  Geospatial Data Wrangling with R"
  },
  {
    "objectID": "Hands-on_Ex1.html#overview",
    "href": "Hands-on_Ex1.html#overview",
    "title": "Hands-on Exercise 1",
    "section": "Overview",
    "text": "Overview\nIn this hands-on exercise, you will learn how to handle geospatial data in R by using sf package.\nBy the end of this hands-on exercise, you should acquire the following competencies:\n\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex1.html#choropleth-mapping-with-r",
    "href": "Hands-on_Ex1.html#choropleth-mapping-with-r",
    "title": "Hands-on Exercise 1",
    "section": "2  Choropleth Mapping with R",
    "text": "2  Choropleth Mapping with R"
  },
  {
    "objectID": "Hands-on_Ex1.html#overview-1",
    "href": "Hands-on_Ex1.html#overview-1",
    "title": "Hands-on Exercise 1",
    "section": "Overview",
    "text": "Overview\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called **tmap** package."
  },
  {
    "objectID": "Hands-on_Ex1.html#getting-started-1",
    "href": "Hands-on_Ex1.html#getting-started-1",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\nImporting Data into R\n\nmpsz <- st_read(dsn = \"hands-on_ex1/data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\Shumin\\Documents\\Documents Files\\Learning\\SMU\\ISSS624 Applied Geospatial Analytics\\shumin86718\\ISSS624\\hands-on_ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nImporting Attribute Data into R\n\npopdata <- read_csv(\"hands-on_ex1/data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\nData Preparation\n\nData wrangling\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\nhead(popdata2020, n =10)\n\n# A tibble: 10 × 7\n   PA         SZ                     YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPEND…¹\n   <chr>      <chr>                  <dbl>            <dbl> <dbl> <dbl>    <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre  1290             2760   760  4810    0.743\n 2 Ang Mo Kio Cheng San               5640            16460  6050 28150    0.710\n 3 Ang Mo Kio Chong Boon              5100            15000  6470 26570    0.771\n 4 Ang Mo Kio Kebun Bahru             4620            13010  5120 22750    0.749\n 5 Ang Mo Kio Sembawang Hills         1880             3630  1310  6820    0.879\n 6 Ang Mo Kio Shangri-La              3330             9050  3610 15990    0.767\n 7 Ang Mo Kio Tagore                  1940             4480  1530  7950    0.775\n 8 Ang Mo Kio Townsville              4190            11950  5100 21240    0.777\n 9 Ang Mo Kio Yio Chu Kang               0                0     0     0  NaN    \n10 Ang Mo Kio Yio Chu Kang East       1110             2410   750  4270    0.772\n# … with abbreviated variable name ¹​DEPENDENCY\n\n\n\n\nJoining the attribute data and geospatial data\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"hands-on_ex1/data/rds/mpszpop2020.rds\")\n\n\n\n\nChoropleth Mapping Geospatial Data Using tmap\n\nPlotting a choropleth map quickly by using qtm()\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\nCreating a choropleth map by using tmap’s elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\nDrawing a base map\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\nDrawing a choropleth map using tm_fill() and *tm_border()**\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\nData classification methods of tmap\n\n\n\n\nPlotting choropleth maps with built-in classification methods\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n#2 classes\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n#6 classes\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n#10 classes\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n#20 classes\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nPlotting choropleth map with custome break\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\nColour Scheme\n\nUsing ColourBrewer palette\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMap Layouts\n\nMap Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nCartographic Furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\n\nBy assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_Ex1.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex1.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1",
    "section": "Choropleth Mapping Geospatial Data Using tmap",
    "text": "Choropleth Mapping Geospatial Data Using tmap\n\nPlotting a choropleth map quickly by using qtm()\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\nCreating a choropleth map by using tmap’s elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nDrawing a base map\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\nDrawing a choropleth map using tm_fill() and *tm_border()**\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\nData classification methods of tmap\n\n\nPlotting choropleth maps with built-in classification methods\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nPlotting choropleth map with custome break\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\nColour Scheme\n\nUsing ColourBrewer palette\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMap Layouts\n\nMap Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\nCartographic Furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\n\nBy assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to compute spatial weights using R. By the end to this hands-on exercise, we will be able to do:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#getting-started",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#getting-started",
    "title": "In-class Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below will install and load tidyverse and sf packages.\n\npacman::p_load(sf, tmap, tidyverse, spdep)\n\n\nImporting Geospatial Data\nImporting polygon features\nThis code chunk will import ESRI shapefile into R.\n\nhunan_sf <- st_read(dsn = \"data/geospatial\", \n                layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Users\\Shumin\\Documents\\Documents Files\\Learning\\SMU\\ISSS624 Applied Geospatial Analytics\\shumin86718\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting attribute data in csv\nIt’s using read_csv() of readr package.\n\nhunan_2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nJoin table hunan_sf spatialPolygonsDataFrame with hunan2012 dataframe, this is performed by using left_join() of dplyr package.\n\nhunan <- left_join(hunan_sf, hunan_2012)\n\nJoining, by = \"County\"\n\n\n\n\nVisualizing Regional Development indicator\nA basemap and choropleth map are showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#computing-contiguity-spatial-weights",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#computing-contiguity-spatial-weights",
    "title": "In-class Exercise 1",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\n\nUse poly2nb() of spdep package to comput contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\n\n\nComputing (QUEEN) contiguity based neighbours\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nSummary report shows hunan has 88 regions, the most connected area unit has 11 neighbours. There are two areas with only one neighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these 5 countries by using below code chunk.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nTo display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nCreating (ROOK) contiguity based neighbours\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nSummary report shows hunan has 88 regions, the most connected area unit has 10 neighbours. There are two areas with only one neighbours.\n\n\nVisualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package.\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nDo the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nnow we have the latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\nCheck the first few records to see if data are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\nPlotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\nPlotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\nPlotting both QUEEN and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#computing-distance-based-neighbours",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#computing-distance-based-neighbours",
    "title": "In-class Exercise 1",
    "section": "Computing distance based neighbours",
    "text": "Computing distance based neighbours\nIn this section, we will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nDetermine the cut-off distance\nWe need to determine the upper limit for distance band by using the following steps:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79km, we will use this as the upper threshold to give certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nWe will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nAverage number of links means each region is having average of 3.6 neighbours.\nDisplay the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nUse different method to display the structure of the weight matrix is combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\nPlotting fixed distance wight matrix\nWe will plot distance weight matrix by using below code.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nWe can plot them in seprarated graph using below code.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nDisplay the content of the matrix by str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNow each county has six neighbours.\n\n\nPlotting distance based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#weights-based-on-idw",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#weights-based-on-idw",
    "title": "In-class Exercise 1",
    "section": "Weights based on IDW",
    "text": "Weights based on IDW\nIn this section, we will learn how to derive a spatial weight matrix based on inversed Distance method.\nFirst, compute the distance between areas using nbdists() of spdep.\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s four neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#application-of-spatial-weight-matrix",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class Exercise 1",
    "section": "Application of Spatial Weight matrix",
    "text": "Application of Spatial Weight matrix\nIn this section, we will learn how to create four different spatial lagged variables:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and spatial window sum.\n\n\nSpatial lag with row-standardized weights\nWe will compute the average neighbour GDPPC value for each polygon. These values are reffered to as spatially lagged values.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nIn previous section, we retrieved the GDPPC of 5 countries by using below code.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe need to append the spatially lag GDPPC values into hunan sf dataframe by below code.\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nSee overview of hunan dataframe. Average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlot the GDPPC and spatial lag GDPPC for comparison using below code.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights. To do this we assign binary weights to the neighbor structure that includes the diagonal element.\n\nwm_q1 <- wm_q\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nWe will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\nNow use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith our new weight structure, We can compute the lag variable with lag.listw().\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nConvert the lag variable list object into a dataframe by using as.data.frame().\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nLastly, qtm() of tmap package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on_Ex2",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, we will be able to do:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on_Ex2",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\nThe code chunk below will install and load tidyverse and sf packages.\n\npacman::p_load(sf, tmap, tidyverse, spdep,ggplot2)\n\n\n4.2.1 Importing Geospatial Data\nUse st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\nThis code chunk will import ESRI shapefile into R.\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Users\\Shumin\\Documents\\Documents Files\\Learning\\SMU\\ISSS624 Applied Geospatial Analytics\\shumin86718\\ISSS624\\Hands-on_Ex\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#section",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#section",
    "title": "Hands-on_Ex2",
    "section": "",
    "text": "Global Spatial Autocorrelation\nIn this section, we will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\nComputing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\n\n\nRow-standardized weights matrix\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n❗The input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#import-csv-file-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#import-csv-file-into-r-environment",
    "title": "Hands-on_Ex2",
    "section": "4.3 Import csv file into R environment",
    "text": "4.3 Import csv file into R environment\nWe will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n4.3.1 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\n4.3.2 Visualising Regional Development Indicator\nWe are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "title": "Hands-on_Ex2",
    "section": "4.4 Global Spatial Autocorrelation",
    "text": "4.4 Global Spatial Autocorrelation\nIn this section, we will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n4.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\n\n\n4.4.2 Row-standardized weights matrix\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n❗\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n4.4.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, we will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n\n4.4.4 Moron’s I test\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n4.4.4.1 Computing Monte Carlo Moran’s I\nPerforms permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nQuestion: What statistical conclustion can you draw fro mthe output above?\nClustered, observations tend to be similar\n\n\n\n4.4.4.2 Visualising Monte Carlo Moran’s I\nTo examine the simulated Moran’s I test staticstic in details, we can plot the distribution of the statistical values as a histogram by using below code.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nQuestion:\nWhat statistical observation can you draw from the output above?\n\nIt’s not normally distributed, and a bit skewed to right.\nUsing ggplot2 to plot the histogram\n\nbperm_df <- data.frame(bperm$res)\n\n\nggplot(data=bperm_df,\n\naes(x= bperm.res))+\n\ngeom_histogram(bins=20,\n\ncolor=\"black\",\n\nfill=\"light grey\") +\n\nlabs(title = \"Histogram\",\n\nx = \"Simulated Moran's I\",\n\ny = \"Frequency\")\n\n\n\n\n\n\n\n4.4.5 Global Spatial Autocorrelation: Geary’s\nIn this section, we will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\n4.4.5.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n4.4.5.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n4.4.5.3 Visualising the Monte Carlo Geary’s C\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "title": "Hands-on_Ex2",
    "section": "4.5 Spatial Correlogram",
    "text": "4.5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n4.5.1 Comput Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nQuestion: What statistical observation can you draw from the plot above?\n\nFrom the plot can only observed the correlation values are not statistically significant.\n\n\n4.5.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "title": "Hands-on_Ex2",
    "section": "4.6 Cluster and Outlier Analysis",
    "text": "4.6 Cluster and Outlier Analysis\n\n4.6.1 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n4.6.1.1 Mapping the local Moran’s I\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n4.6.1.2 Mapping local Moran’s I values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n4.6.1.3 Mapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.6.1.4 Mapping both local Moran’s I values and p-values\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "title": "Hands-on_Ex2",
    "section": "4.7 Creating a LISA Cluster Map",
    "text": "4.7 Creating a LISA Cluster Map\n\n4.7.1 Plotting Moran scatterplot\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nThe plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n4.7.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n4.7.3 Preparing LISA map classes\nBelow codes show the steps to prepare LISA cluster map.\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \n\n\nC_mI <- localMI[,1] - mean(localMI[,1])    \n\n\nsignif <- 0.05       \n\n\nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 1      \nquadrant[DV <0 & C_mI>0] <- 2\nquadrant[DV >0 & C_mI<0] <- 3\n\n\nquadrant[localMI[,5]>signif] <- 0\n\nWe can also combined all the steps into one single code chunk as shown below:\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \nC_mI <- localMI[,1] - mean(localMI[,1])    \nsignif <- 0.05       \nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 1      \nquadrant[DV <0 & C_mI>0] <- 2\nquadrant[DV >0 & C_mI<0] <- 3\nquadrant[localMI[,5]>signif] <- 0\n\n\n\n4.7.4 Plotting LISA map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)\n\n\n\n\nQuestion: What statistical observations can you draw from the LISA map above?\nArea units which have same range of GDPPC also have high-high significance."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on_Ex2",
    "section": "4.8 Hot Spot and Cold Spot Area Analysis",
    "text": "4.8 Hot Spot and Cold Spot Area Analysis\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n4.8.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics.It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n4.8.2 Deriving distance-based weight matrix\nwe need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n4.8.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)\n\n\n\n4.8.2.2 Determine the cut-off distance\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n4.8.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nnb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\n4.8.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#computing-gi-statistics",
    "title": "Hands-on_Ex2",
    "section": "4.9 Computing Gi statistics",
    "text": "4.9 Computing Gi statistics\n\n4.9.1 Gi statistics using fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n4.9.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\nArea units which have similar GDP range have the high local Gi.\n\n\n4.9.3 Gi statistics using adaptive distance\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n4.9.4 Mapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\n\nAreas have high Gi for adaptive distance weights became more compare to Gi map with fixed distance weights."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home_Ex1",
    "section": "",
    "text": "By Han Shumin\n29 November 2022\n\n\n\n\n\n\n\n\n\nThe code chunk below will install and load tidyverse and sf packages.\n\npacman::p_load(sf, tmap, tidyverse, spdep,ggplot2, dplyr)\n\n\n\n\n\n\nxxxx\n\nnigeria_sf <- st_read(dsn = \"data/geospatial\", \n                 layer = \"geoBoundaries-NGA-ADM2\")\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\Users\\Shumin\\Documents\\Documents Files\\Learning\\SMU\\ISSS624 Applied Geospatial Analytics\\shumin86718\\ISSS624\\Take-home_Ex\\Take-home_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nnigeria_data <- read_csv(\"data/aspatial/nigeria.csv\")\n\nRows: 95008 Columns: 50\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (27): #source, #status_id, #water_source_clean, #water_source_category, ...\ndbl (19): #lat_deg, #lon_deg, #install_year, #distance_to_primary_road, #dis...\nlgl  (4): is_urban, latest_record, lat_deg_original, lon_deg_original\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n#nigeria_data[rowSums(is.na(nigeria_data))!=0,]\n\n\n#nigeria_data$`#status_clean`[is.na(nigeria_data$`#status_clean`)] <- \"Unknown\"\n\n\nfunctional <- nigeria_data %>%\n  filter(`#status_clean` %in%  c(\"Functional\", \"Functional but not in use\" , \"Functional but needs repair\")) %>%\n  select(`#lat_deg`, `#lon_deg`, `#water_source_category`, `#clean_adm2`, `#install_year`, `#status_clean`, `#distance_to_primary_road`, `#distance_to_secondary_road`, `#distance_to_tertiary_road`, `#distance_to_city`, `#distance_to_town`)\n\n\nnonfunctional <- nigeria_data %>%\n  filter(`#status_clean` %in%  c(\"Abandoned/Decommissioned\", \"Abandoned\" , \"Non functional due to dry season\", \"Non functional due to dry season\", \"Non-Functional due to dry season\")) %>%\n  select(`#lat_deg`, `#lon_deg`, `#water_source_category`, `#clean_adm2`, `#install_year`, `#status_clean`, `#distance_to_primary_road`, `#distance_to_secondary_road`, `#distance_to_tertiary_road`, `#distance_to_city`, `#distance_to_town`)\n\n\nst_geometry(nigeria_sf)\n\nGeometry set for 774 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((7.401109 5.081948, 7.400133 5.0...\n\n\nMULTIPOLYGON (((7.334479 5.104902, 7.335673 5.1...\n\n\nMULTIPOLYGON (((13.83477 13.42336, 13.81909 13....\n\n\nMULTIPOLYGON (((7.045872 9.230501, 7.026536 9.2...\n\n\nMULTIPOLYGON (((7.811244 5.094527, 7.812334 5.0...\n\n\n\nglimpse(nigeria_sf)\n\nRows: 774\nColumns: 6\n$ shapeName  <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ Level      <chr> \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"AD…\n$ shapeID    <chr> \"NGA-ADM2-72505758B79815894\", \"NGA-ADM2-72505758B67905963\",…\n$ shapeGroup <chr> \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NG…\n$ shapeType  <chr> \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"AD…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((7.401109 5...., MULTIPOLYGON (…\n\n\n\n#head(nigeria_sf, n=5)  \n\n\n#plot(nigeria_sf)\n\n\n#plot(st_geometry(nigeria_sf))\n\n\nst_crs(nigeria_sf)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\n\nnigeria_sf26391 <- st_transform(nigeria_sf, crs = 26391)\n\n\nst_crs(nigeria_sf26391)\n\nCoordinate Reference System:\n  User input: EPSG:26391 \n  wkt:\nPROJCRS[\"Minna / Nigeria West Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria West Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",4.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",230738.26,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria - onshore west of 6°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,2.69,13.9,6.5]],\n    ID[\"EPSG\",26391]]\n\n\n\nnigeria_data_sf <- st_as_sf(nigeria_data,\n                            coords = c(\"#lon_deg\", \"#lat_deg\"),\n                            crs=4326) %>%\n  st_transform(crs = 26391)\n\n\nfunctional <- st_as_sf(functional,\n                            coords = c(\"#lon_deg\", \"#lat_deg\"),\n                            crs=4326) %>%\n  st_transform(crs = 26391)\n\n\nnonfunctional <- st_as_sf(nonfunctional,\n                            coords = c(\"#lon_deg\", \"#lat_deg\"),\n                            crs=4326) %>%\n  st_transform(crs = 26391)\n\n\nnigeria_sf26391$`Waterpoint Count`<- lengths(st_intersects(nigeria_sf26391, nigeria_data_sf))\n\n\nnigeria_sf26391$`functional Waterpoint Count`<- lengths(st_intersects(nigeria_sf26391, functional))\n\n\nnigeria_sf26391$`nonfunctional Waterpoint Count`<- lengths(st_intersects(nigeria_sf26391, nonfunctional))\n\n\n#summary(nigeria_sf26391$`Waterpoint Count`)\n\n\n#top_n(nigeria_sf26391, 1, `Waterpoint Count`)\n\n\n#summary(nigeria_sf26391$`functional Waterpoint Count`)\n\n\n#summary(nigeria_sf26391$`nonfunctional Waterpoint Count`)\n\n\n#top_n(nigeria_sf26391, 1, `functional Waterpoint Count`)\n\n\n#top_n(nigeria_sf26391, 1, `nonfunctional Waterpoint Count`)\n\n\nnigeria_sf26391 <- nigeria_sf26391 %>%\n  mutate(`functional_ratio` = `functional Waterpoint Count`/`Waterpoint Count`)\n\n\nnigeria_sf26391 <- nigeria_sf26391 %>%\n  mutate(`nonfunctional_ratio` = `nonfunctional Waterpoint Count`/`Waterpoint Count`)\n\n\n#nigeria_sf26391$`functional_ratio`\n\n\n#nigeria_sf26391$`nonfunctional_ratio`\n\n\n#tmap_mode(\"plot\")\n#qtm(nigeria_sf26391, \n#    fill = \"functional_ratio\")\n\n\ntm_shape(nigeria_sf26391)+\n  tm_fill(\"functional_ratio\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"functional waterpoint ratio\") +\n  tm_layout(main.title = \"Distribution of Functional Water Point Ratio by L2 LGA\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Level 2 Local Government Area from GeoBoundaries\\n and Water Point data from WPdx Global Data Repositories\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\ntm_shape(nigeria_sf26391)+\n  tm_fill(\"nonfunctional_ratio\", \n          style = \"quantile\", \n          palette = \"Greens\",\n          title = \"nonfunctional waterpoint ratio\") +\n  tm_layout(main.title = \"Distribution of nonFunctional Water Point Ratio by L2 LGA\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Level 2 Local Government Area from GeoBoundaries\\n and Water Point data from WPdx Global Data Repositories\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nwm_q_nigeria_sf26391 <- poly2nb(nigeria_sf26391, queen=TRUE)\nsummary(wm_q_nigeria_sf26391)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\n\nstr(wm_q_nigeria_sf26391)\n\nList of 774\n $ : int [1:4] 2 548 624 721\n $ : int [1:3] 1 624 721\n $ : int [1:3] 261 447 507\n $ : int [1:7] 257 263 436 446 454 466 709\n $ : int [1:5] 203 208 331 617 738\n $ : int [1:7] 170 217 218 337 379 553 758\n $ : int [1:6] 8 176 214 281 349 555\n $ : int [1:4] 7 214 544 555\n $ : int [1:5] 18 104 337 601 757\n $ : int [1:7] 25 216 325 364 365 528 632\n $ : int [1:7] 26 27 43 157 191 524 565\n $ : int [1:8] 135 263 417 446 520 690 695 709\n $ : int [1:5] 31 37 471 583 584\n $ : int [1:8] 170 362 363 546 577 581 589 626\n $ : int [1:7] 49 82 177 297 306 352 580\n $ : int [1:5] 30 187 328 357 360\n $ : int [1:3] 35 638 639\n $ : int [1:5] 9 19 104 576 601\n $ : int [1:6] 18 103 104 376 574 576\n $ : int [1:5] 419 466 471 508 641\n $ : int [1:5] 61 162 269 520 596\n $ : int [1:3] 49 297 326\n $ : int [1:5] 54 291 537 618 619\n $ : int [1:4] 123 527 673 761\n $ : int [1:7] 10 181 216 314 325 366 552\n $ : int [1:4] 11 27 191 562\n $ : int [1:5] 11 26 562 565 762\n $ : int [1:7] 29 173 300 315 316 358 369\n $ : int [1:7] 28 173 182 358 378 460 591\n $ : int [1:8] 16 38 39 186 192 329 357 360\n $ : int [1:6] 13 94 211 471 561 584\n $ : int [1:3] 51 62 693\n $ : int [1:6] 166 227 238 655 743 750\n $ : int [1:7] 42 104 213 330 553 559 757\n $ : int [1:7] 17 275 295 378 460 638 639\n $ : int [1:8] 50 107 164 247 408 432 455 759\n $ : int [1:11] 13 38 40 211 212 320 570 583 584 620 ...\n $ : int [1:7] 30 37 39 40 41 192 320\n $ : int [1:4] 30 38 186 320\n $ : int [1:4] 37 38 41 620\n $ : int [1:5] 38 40 192 620 634\n $ : int [1:4] 34 136 137 559\n $ : int [1:3] 11 157 524\n $ : int [1:6] 45 290 303 328 360 634\n $ : int [1:3] 44 290 303\n $ : int [1:4] 438 521 668 742\n $ : int [1:5] 166 234 238 698 750\n $ : int [1:4] 113 265 386 701\n $ : int [1:7] 15 22 51 297 326 580 623\n $ : int [1:8] 36 98 107 409 416 432 681 696\n $ : int [1:8] 32 49 62 207 461 580 623 693\n $ : int [1:6] 53 78 80 165 602 636\n $ : int [1:8] 52 80 199 280 602 621 622 739\n $ : int [1:7] 23 79 293 294 532 537 618\n $ : int [1:3] 122 430 605\n $ : int [1:5] 77 376 533 576 728\n $ : int [1:4] 58 199 322 621\n $ : int [1:7] 57 322 323 522 523 621 622\n $ : int [1:5] 88 128 493 700 714\n $ : int [1:7] 61 158 561 578 592 596 626\n $ : int [1:5] 21 60 269 596 626\n $ : int [1:6] 32 51 207 461 462 693\n $ : int [1:6] 90 237 384 416 467 765\n $ : int [1:8] 65 74 109 113 131 148 251 407\n $ : int [1:5] 64 74 113 265 701\n $ : int [1:6] 103 104 288 351 559 574\n $ : int [1:7] 304 348 511 594 609 640 694\n $ : int [1:2] 157 191\n $ : int [1:9] 115 140 146 248 273 274 473 500 512\n $ : int [1:5] 71 301 341 343 610\n $ : int [1:9] 70 173 298 299 301 343 344 550 625\n $ : int [1:8] 73 361 594 607 609 638 639 665\n $ : int [1:6] 72 361 374 377 665 666\n $ : int [1:6] 64 65 109 683 701 754\n $ : int [1:7] 272 398 422 433 485 501 768\n $ : int [1:8] 254 287 427 459 547 647 677 751\n $ : int [1:6] 56 533 534 579 716 728\n $ : int [1:7] 52 79 80 165 215 532 579\n $ : int [1:5] 54 78 532 579 618\n $ : int [1:5] 52 53 78 215 739\n $ : int [1:5] 99 145 233 426 689\n $ : int [1:3] 15 352 580\n $ : int [1:4] 132 258 383 414\n $ : int [1:5] 123 148 437 673 692\n $ : int [1:7] 105 156 394 654 675 707 712\n $ : int 0\n $ : int [1:6] 151 221 226 399 410 486\n $ : int [1:6] 59 150 489 648 700 714\n $ : int [1:7] 260 408 416 463 674 681 759\n $ : int [1:9] 63 163 232 236 237 452 497 710 765\n $ : int [1:4] 160 271 406 440\n $ : int [1:6] 119 390 392 487 656 668\n $ : int [1:6] 123 354 402 607 665 666\n $ : int [1:8] 31 158 436 471 520 561 596 709\n $ : int [1:6] 391 392 405 469 656 708\n $ : int [1:7] 97 139 389 403 420 451 653\n $ : int [1:5] 96 389 451 662 773\n $ : int [1:5] 50 231 432 696 708\n $ : int [1:5] 81 426 689 760 769\n  [list output truncated]\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:774] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = nigeria_sf26391, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\n\nwm_r_nigeria_sf26391 <- poly2nb(nigeria_sf26391, queen=FALSE)\nsummary(wm_r_nigeria_sf26391)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4420 \nPercentage nonzero weights: 0.7378029 \nAverage number of links: 5.710594 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  59 127 181 141 124  66  42  11   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\n\nstr(wm_r_nigeria_sf26391)\n\nList of 774\n $ : int [1:4] 2 548 624 721\n $ : int [1:3] 1 624 721\n $ : int [1:3] 261 447 507\n $ : int [1:7] 257 263 436 446 454 466 709\n $ : int [1:5] 203 208 331 617 738\n $ : int [1:6] 170 217 218 337 379 553\n $ : int [1:6] 8 176 214 281 349 555\n $ : int [1:4] 7 214 544 555\n $ : int [1:5] 18 104 337 601 757\n $ : int [1:7] 25 216 325 364 365 528 632\n $ : int [1:7] 26 27 43 157 191 524 565\n $ : int [1:8] 135 263 417 446 520 690 695 709\n $ : int [1:5] 31 37 471 583 584\n $ : int [1:8] 170 362 363 546 577 581 589 626\n $ : int [1:7] 49 82 177 297 306 352 580\n $ : int [1:5] 30 187 328 357 360\n $ : int [1:3] 35 638 639\n $ : int [1:5] 9 19 104 576 601\n $ : int [1:6] 18 103 104 376 574 576\n $ : int [1:5] 419 466 471 508 641\n $ : int [1:5] 61 162 269 520 596\n $ : int [1:3] 49 297 326\n $ : int [1:5] 54 291 537 618 619\n $ : int [1:4] 123 527 673 761\n $ : int [1:7] 10 181 216 314 325 366 552\n $ : int [1:4] 11 27 191 562\n $ : int [1:5] 11 26 562 565 762\n $ : int [1:7] 29 173 300 315 316 358 369\n $ : int [1:7] 28 173 182 358 378 460 591\n $ : int [1:8] 16 38 39 186 192 329 357 360\n $ : int [1:6] 13 94 211 471 561 584\n $ : int [1:3] 51 62 693\n $ : int [1:6] 166 227 238 655 743 750\n $ : int [1:7] 42 104 213 330 553 559 757\n $ : int [1:7] 17 275 295 378 460 638 639\n $ : int [1:8] 50 107 164 247 408 432 455 759\n $ : int [1:11] 13 38 40 211 212 320 570 583 584 620 ...\n $ : int [1:7] 30 37 39 40 41 192 320\n $ : int [1:4] 30 38 186 320\n $ : int [1:4] 37 38 41 620\n $ : int [1:5] 38 40 192 620 634\n $ : int [1:4] 34 136 137 559\n $ : int [1:3] 11 157 524\n $ : int [1:6] 45 290 303 328 360 634\n $ : int [1:3] 44 290 303\n $ : int [1:4] 438 521 668 742\n $ : int [1:5] 166 234 238 698 750\n $ : int [1:4] 113 265 386 701\n $ : int [1:7] 15 22 51 297 326 580 623\n $ : int [1:8] 36 98 107 409 416 432 681 696\n $ : int [1:7] 32 49 62 207 580 623 693\n $ : int [1:6] 53 78 80 165 602 636\n $ : int [1:8] 52 80 199 280 602 621 622 739\n $ : int [1:7] 23 79 293 294 532 537 618\n $ : int [1:3] 122 430 605\n $ : int [1:5] 77 376 533 576 728\n $ : int [1:4] 58 199 322 621\n $ : int [1:7] 57 322 323 522 523 621 622\n $ : int [1:5] 88 128 493 700 714\n $ : int [1:7] 61 158 561 578 592 596 626\n $ : int [1:5] 21 60 269 596 626\n $ : int [1:5] 32 51 461 462 693\n $ : int [1:6] 90 237 384 416 467 765\n $ : int [1:8] 65 74 109 113 131 148 251 407\n $ : int [1:5] 64 74 113 265 701\n $ : int [1:6] 103 104 288 351 559 574\n $ : int [1:7] 304 348 511 594 609 640 694\n $ : int [1:2] 157 191\n $ : int [1:9] 115 140 146 248 273 274 473 500 512\n $ : int [1:5] 71 301 341 343 610\n $ : int [1:9] 70 173 298 299 301 343 344 550 625\n $ : int [1:8] 73 361 594 607 609 638 639 665\n $ : int [1:6] 72 361 374 377 665 666\n $ : int [1:6] 64 65 109 683 701 754\n $ : int [1:7] 272 398 422 433 485 501 768\n $ : int [1:8] 254 287 427 459 547 647 677 751\n $ : int [1:6] 56 533 534 579 716 728\n $ : int [1:7] 52 79 80 165 215 532 579\n $ : int [1:5] 54 78 532 579 618\n $ : int [1:5] 52 53 78 215 739\n $ : int [1:5] 99 145 233 426 689\n $ : int [1:3] 15 352 580\n $ : int [1:4] 132 258 383 414\n $ : int [1:5] 123 148 437 673 692\n $ : int [1:7] 105 156 394 654 675 707 712\n $ : int 0\n $ : int [1:6] 151 221 226 399 410 486\n $ : int [1:6] 59 150 489 648 700 714\n $ : int [1:7] 260 408 416 463 674 681 759\n $ : int [1:9] 63 163 232 236 237 452 497 710 765\n $ : int [1:4] 160 271 406 440\n $ : int [1:6] 119 390 392 487 656 668\n $ : int [1:6] 123 354 402 607 665 666\n $ : int [1:8] 31 158 436 471 520 561 596 709\n $ : int [1:6] 391 392 405 469 656 708\n $ : int [1:7] 97 139 389 403 420 451 653\n $ : int [1:5] 96 389 451 662 773\n $ : int [1:5] 50 231 432 696 708\n $ : int [1:5] 81 426 689 760 769\n  [list output truncated]\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:774] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = nigeria_sf26391, queen = FALSE)\n - attr(*, \"type\")= chr \"rook\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\nlongitude <- map_dbl(nigeria_sf26391$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude<- map_dbl(nigeria_sf26391$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)\n\n\nhead(coords)\n\n     longitude  latitude\n[1,]  549364.0  123694.9\n[2,]  547123.4  120376.5\n[3,] 1189496.9 1059770.9\n[4,]  489057.4  534262.6\n[5,]  593718.2  113824.1\n[6,]  642618.7  251222.3\n\n\n\n\n\n\nplot(nigeria_sf26391$geometry, border=\"lightgrey\")\nplot(wm_q_nigeria_sf26391, coords, pch = 19, cex = 0.4, add = TRUE, col= \"red\")\n\n\n\n\n\nplot(nigeria_sf26391$geometry, border=\"lightgrey\")\nplot(wm_r_nigeria_sf26391, coords, pch = 19, cex = 0.4, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\nnigeria_sf26391$`functional_ratio`[is.na(nigeria_sf26391$`functional_ratio`)] <- 0\n\n\nnigeria_sf26391$`nonfunctional_ratio`[is.na(nigeria_sf26391$`nonfunctional_ratio`)] <- 0\n\n\nrswm_q <- nb2listw(wm_q_nigeria_sf26391, style=\"W\", zero.policy = TRUE)\nprint(rswm_q,zero.policy = TRUE)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\n\n\n\n\n\n\nmoran.test(nigeria_sf26391$`functional_ratio`, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nigeria_sf26391$functional_ratio  \nweights: rswm_q  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 24.953, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.5418949105     -0.0012953368      0.0004738697 \n\n\nComputing Monte Carlo Moran’s I\n\nset.seed(1234)\nbperm_fun= moran.mc(nigeria_sf26391$`functional_ratio`, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_fun\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nigeria_sf26391$functional_ratio \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.54189, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nVisualising Monte Carlo Moran’s I\n\nmean(bperm_fun$res[1:999])\n\n[1] -0.002329953\n\n\n\nvar(bperm_fun$res[1:999])\n\n[1] 0.000492501\n\n\n\nsummary(bperm_fun$res[1:999])\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.067694 -0.017681 -0.002601 -0.002330  0.012414  0.070628 \n\n\n\nhist(bperm_fun$res, \n     freq=TRUE, \n     breaks=50, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\n\ngeary.test(nigeria_sf26391$`functional_ratio`, \n           listw=rswm_q, zero.policy = TRUE)\n\n\n    Geary C test under randomisation\n\ndata:  nigeria_sf26391$functional_ratio \nweights: rswm_q \n\nGeary C statistic standard deviate = 23.855, p-value < 2.2e-16\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n     0.4489704923      1.0000000000      0.0005335554 \n\n\nComputing Monte Carlo Geary’s C\n\nset.seed(1234)\nbperm_fun=geary.mc(nigeria_sf26391$`functional_ratio`, \n               listw=rswm_q, \n               nsim=999,\n               zero.policy = TRUE)\nbperm_fun\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  nigeria_sf26391$functional_ratio \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.44897, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nVisualising the Monte Carlo Geary’s C\n\nmean(bperm_fun$res[1:999])\n\n[1] 0.9994353\n\n\n\nvar(bperm_fun$res[1:999])\n\n[1] 0.0005498719\n\n\n\nsummary(bperm_fun$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.9205  0.9840  1.0001  0.9994  1.0155  1.0692 \n\n\n\nhist(bperm_fun$res, freq=TRUE, breaks=50, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\n\n\nMI_corr <- sp.correlogram(wm_q_nigeria_sf26391, \n                          nigeria_sf26391$`functional_ratio`, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\",\n                          zero.policy = TRUE)\nplot(MI_corr)\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for nigeria_sf26391$functional_ratio \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  5.4189e-01 -1.2953e-03  4.7387e-04           24.953       < 2.2e-16\n2 (773)  4.4015e-01 -1.2953e-03  2.0306e-04           30.978       < 2.2e-16\n3 (773)  3.5355e-01 -1.2953e-03  1.2249e-04           32.061       < 2.2e-16\n4 (773)  2.7204e-01 -1.2953e-03  8.8026e-05           29.133       < 2.2e-16\n5 (773)  2.0996e-01 -1.2953e-03  6.9122e-05           25.410       < 2.2e-16\n6 (773)  1.7558e-01 -1.2953e-03  5.7666e-05           23.293       < 2.2e-16\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n6 (773) ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\nGC_corr <- sp.correlogram(wm_q_nigeria_sf26391, \n                          nigeria_sf26391$`functional_ratio`, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\",\n                          zero.policy = TRUE)\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for nigeria_sf26391$functional_ratio \nmethod: Geary's C\n          estimate expectation   variance standard deviate Pr(I) two sided    \n1 (773) 0.44897049  1.00000000 0.00053356          -23.855       < 2.2e-16 ***\n2 (773) 0.55285165  1.00000000 0.00025123          -28.211       < 2.2e-16 ***\n3 (773) 0.63751498  1.00000000 0.00016232          -28.452       < 2.2e-16 ***\n4 (773) 0.71184734  1.00000000 0.00012945          -25.326       < 2.2e-16 ***\n5 (773) 0.76328523  1.00000000 0.00011460          -22.112       < 2.2e-16 ***\n6 (773) 0.78640620  1.00000000 0.00011200          -20.182       < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\n\n\nfips <- order(nigeria_sf26391$shapeName)\n\n\nlocalMI <- localmoran(nigeria_sf26391$`functional_ratio`, rswm_q, zero.policy = TRUE)\nhead(localMI)\n\n           Ii          E.Ii      Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.40907414 -1.660246e-04 0.031995597  2.2878795   0.0221445413\n2  0.39803074 -1.789636e-04 0.046044739  1.8557601   0.0634877608\n3  4.24438429 -5.490795e-03 1.405196770  3.5851522   0.0003368817\n4 -0.05905876 -1.991603e-04 0.021845937 -0.3982282   0.6904619977\n5  0.05214498 -8.206875e-06 0.001263831  1.4670209   0.1423703651\n6  0.48684969 -4.743753e-04 0.052020002  2.1366465   0.0326267548\n\n\n\ndf = data.frame(localMI[fips,])\nrownames(df) = make.names(nigeria_sf26391$shapeName, unique=TRUE)\nprintCoefmat(df, check.names=FALSE)\n\n                            Ii        E.Ii      Var.Ii        Z.Ii\nAba.North           4.0907e-01 -1.6602e-04  3.1996e-02  2.2879e+00\nAba.South           3.9803e-01 -1.7896e-04  4.6045e-02  1.8558e+00\nAbadam              4.2444e+00 -5.4908e-03  1.4052e+00  3.5852e+00\nAbaji              -5.9059e-02 -1.9916e-04  2.1846e-02 -3.9823e-01\nAbak                5.2145e-02 -8.2069e-06  1.2638e-03  1.4670e+00\nAbakaliki           4.8685e-01 -4.7438e-04  5.2020e-02  2.1366e+00\nAbeokuta.North      9.3715e-02 -1.7140e-05  2.1967e-03  1.9999e+00\nAbeokuta.South     -3.3527e-01 -2.5117e-04  4.8401e-02 -1.5228e+00\nAbi                -4.7486e-02 -1.0027e-05  1.5442e-03 -1.2082e+00\nAboh.Mbaise         9.3857e-01 -1.1259e-03  1.2339e-01  2.6752e+00\nAbua.Odual          2.5920e-01 -4.4935e-04  4.9277e-02  1.1697e+00\nAbuja.Municipal    -1.3968e-01 -2.1416e-04  2.0527e-02 -9.7345e-01\nAdavi               2.3037e-02 -6.4428e-05  9.9212e-03  2.3193e-01\nAdo                 1.4739e-01 -1.0446e-04  1.0014e-02  1.4739e+00\nAdo.Odo.Ota         2.7086e-01 -6.4513e-04  7.0733e-02  1.0208e+00\nAdo.Ekiti           3.5646e-02 -3.0090e-05  4.6337e-03  5.2410e-01\nAfijio              3.5935e-01 -5.5743e-04  1.4337e-01  9.5055e-01\nAfikpo.North        1.8357e-01 -1.0319e-04  1.5889e-02  1.4571e+00\nAfikpo.South        1.4185e+00 -3.0821e-03  3.9380e-01  2.2654e+00\nAgaie               1.4856e-02 -1.0644e-06  1.6391e-04  1.1605e+00\nAgatu               5.6360e-01 -7.9613e-04  1.2250e-01  1.6125e+00\nAgege               4.0812e-01 -2.9968e-03  7.6885e-01  4.6886e-01\nAguata              2.0689e+00 -3.4165e-03  5.2434e-01  2.8619e+00\nAgwara              3.7251e-03 -1.0200e-04  1.9658e-02  2.7296e-02\nAhiazu.Mbaise       8.2806e-01 -1.1872e-03  1.3010e-01  2.2990e+00\nAhoada.East        -9.2870e-02 -1.3541e-05  2.6100e-03 -1.8176e+00\nAhoada.West         2.6818e-01 -5.5599e-03  8.5145e-01  2.9666e-01\nAiyedade            1.6966e-01 -1.8428e-04  2.0214e-02  1.1946e+00\nAiyedire           -6.3159e-04 -2.2701e-06  2.4906e-04 -3.9877e-02\nAiyekire..Gbonyin.  2.6999e-02 -7.0743e-05  6.7818e-03  3.2871e-01\nAjaokuta            4.2625e-02 -2.1416e-04  2.7441e-02  2.5861e-01\nAjeromi.Ifelodun   -1.7096e-03 -5.4017e-08  1.3900e-05 -4.5854e-01\nAjingi              2.1683e+00 -2.2405e-03  2.8651e-01  4.0551e+00\nAkamkpa             7.1824e-01 -1.2147e-03  1.3310e-01  1.9720e+00\nAkinyele            8.6373e-02 -1.3948e-04  1.5301e-02  6.9939e-01\nAkko                3.0487e-02 -1.1814e-04  1.1325e-02  2.8759e-01\nAkoko.Edo           2.7468e-02 -2.0823e-05  1.4462e-03  7.2286e-01\nAkoko.North.East    3.1660e-02 -1.6197e-05  1.7769e-03  7.5144e-01\nAkoko.North.West   -2.6900e-02 -2.8231e-04  5.4399e-02 -1.1412e-01\nAkoko.South.East    2.2666e-01 -6.9965e-04  1.3476e-01  6.1933e-01\nAkoko.South.West    6.6459e-02 -3.9099e-05  6.0210e-03  8.5699e-01\nAkpabuyo            1.2152e+00 -2.4136e-03  4.6410e-01  1.7873e+00\nAkuku.Toru          5.9361e-02 -1.1775e-04  3.0298e-02  3.4171e-01\nAkure.North        -4.7049e-02 -1.1747e-04  1.5054e-02 -3.8251e-01\nAkure.South        -4.3667e-01 -2.9968e-03  7.6885e-01 -4.9459e-01\nAkwanga             2.0215e-01 -1.4611e-03  2.8121e-01  3.8397e-01\nAlbasu              1.2912e+00 -8.8576e-04  1.3628e-01  3.4999e+00\nAleiro              1.1116e-01 -1.1775e-04  2.2694e-02  7.3870e-01\nAlimosho            2.3606e-02 -5.0624e-05  5.5538e-03  3.1744e-01\nAlkaleri            9.9472e-02 -9.7370e-04  9.3261e-02  3.2891e-01\nAmuwo.Odofin        6.9283e-04 -5.4017e-08  5.1787e-06  3.0447e-01\nAnambra.East        9.0116e-01 -1.4042e-03  1.7971e-01  2.1291e+00\nAnambra.West        5.7355e-02 -6.3536e-06  6.0913e-04  2.3241e+00\nAnaocha             9.8594e-01 -6.3624e-04  6.9759e-02  3.7353e+00\nAndoni             -4.6503e-01 -4.6786e-04  1.2034e-01 -1.3392e+00\nAninri              3.4998e-01 -2.1416e-04  3.2972e-02  1.9286e+00\nAniocha.North      -9.6203e-01 -2.4327e-03  4.6776e-01 -1.4031e+00\nAniocha.South       1.0561e-02 -3.5406e-05  3.8843e-03  1.7002e-01\nAnka                7.8137e-01 -1.5121e-03  2.3250e-01  1.6236e+00\nAnkpa               9.4922e-01 -1.9199e-03  2.1023e-01  2.0744e+00\nApa                 9.2996e-01 -8.0412e-04  1.2373e-01  2.6461e+00\nApapa              -1.4126e+00 -5.4908e-03  6.9986e-01 -1.6820e+00\nArdo.Kola          -8.2554e-03 -7.2815e-06  9.3322e-04 -2.7000e-01\nArewa.Dandi        -6.2448e-02 -4.4291e-04  4.2444e-02 -3.0096e-01\nArgungu             7.2497e-02 -3.5406e-05  5.4522e-03  9.8230e-01\nArochukwu           6.9913e-01 -1.0545e-03  1.3501e-01  1.9056e+00\nAsa                -2.0919e-02 -3.6394e-04  3.9914e-02 -1.0289e-01\nAsari.Toru          8.8797e-01 -2.7482e-03  1.0593e+00  8.6545e-01\nAskira.Uba          2.0614e-01 -2.0846e-03  1.7705e-01  4.9486e-01\nAtakumosa.East      7.0524e-02 -7.6868e-05  1.1837e-02  6.4893e-01\nAtakumosa.West      2.6604e-02 -4.9274e-05  4.1934e-03  4.1159e-01\nAtiba               2.0899e-01 -1.3721e-04  1.3153e-02  1.8235e+00\nAtigbo              1.7326e-01 -6.9247e-04  8.8689e-02  5.8412e-01\nAugie               2.0905e-02 -6.3976e-05  8.1989e-03  2.3158e-01\nAuyo                2.5540e+00 -3.5511e-03  3.8822e-01  4.1048e+00\nAwe                -6.4900e-02 -3.3958e-05  3.2555e-03 -1.1369e+00\nAwgu                3.2858e-01 -1.2551e-04  1.6084e-02  2.5918e+00\nAwka.North          1.1135e+00 -1.6096e-03  1.7630e-01  2.6556e+00\nAwka.South          1.1985e+00 -1.6525e-03  2.5405e-01  2.3810e+00\nAyamelum            1.4052e+00 -2.2156e-03  3.4044e-01  2.4121e+00\nBabura              1.3455e+00 -2.5960e-03  3.9875e-01  2.1349e+00\nBadagry             5.8996e-01 -5.6821e-04  1.4613e-01  1.5448e+00\nBade                1.8847e+00 -2.0608e-03  3.9640e-01  2.9968e+00\nBagudo             -3.6058e-01 -6.4979e-04  1.0000e-01 -1.1382e+00\nBagwai              1.9117e+00 -2.4088e-03  2.6364e-01  3.7278e+00\nBakassi             0.0000e+00  0.0000e+00  0.0000e+00         NaN\nBakori              1.8156e+00 -3.8703e-03  4.9411e-01  2.5885e+00\nBakura              1.2028e+00 -3.7483e-03  4.7859e-01  1.7440e+00\nBalanga             1.6958e-01 -7.9707e-05  8.7442e-03  1.8144e+00\nBali                8.6884e-02 -1.6041e-04  1.3650e-02  7.4503e-01\nBama                2.8252e+00 -5.4908e-03  1.0525e+00  2.7591e+00\nBarikin.Ladi        6.4054e-01 -1.1354e-03  1.4536e-01  1.6830e+00\nBaruten            -4.5212e-02 -6.4079e-04  8.2074e-02 -1.5558e-01\nBassa               1.1347e-01 -1.6247e-04  1.5574e-02  9.1055e-01\nBassa.1            -1.5556e-01 -5.7826e-04  7.4069e-02 -5.6946e-01\nBatagarawa          3.2917e-01 -2.7848e-04  3.0544e-02  1.8851e+00\nBatsari             5.8750e-01 -6.8900e-04  1.0603e-01  1.8064e+00\nBauchi              1.1292e+00 -1.9248e-03  2.9585e-01  2.0795e+00\nBaure               6.1637e-01 -2.8903e-04  4.4498e-02  2.9233e+00\nBayo                8.3654e-01 -9.7370e-04  1.4980e-01  2.1639e+00\nBebeji              1.6077e+00 -3.3928e-03  5.2071e-01  2.2327e+00\nBekwara             6.5598e-01 -1.4076e-03  2.1646e-01  1.4130e+00\nBende               1.0015e+00 -1.3641e-03  1.3060e-01  2.7751e+00\nBiase               7.3368e-01 -1.6966e-03  1.6238e-01  1.8249e+00\nBichi               1.2568e+00 -8.3069e-04  1.0638e-01  3.8560e+00\nBida                5.9761e-01 -3.1426e-03  1.2108e+00  5.4597e-01\nBilliri            -5.9407e-02 -2.3818e-05  4.5908e-03 -8.7643e-01\nBindawa             1.3744e+00 -2.0693e-03  2.6467e-01  2.6756e+00\nBinji              -9.6730e-02 -3.5817e-04  4.5888e-02 -4.4988e-01\nBiriniwa            2.2330e+00 -2.4471e-03  3.1286e-01  3.9965e+00\nBirni.Kudu          2.3512e+00 -3.4421e-03  3.2887e-01  4.1059e+00\nBirnin.Gwari        1.9398e-02 -8.7554e-04  6.6918e-02  7.8371e-02\nBirnin.Kebbi        1.3410e-01 -2.7316e-03  3.4914e-01  2.3157e-01\nBirnin.Magaji       1.2697e+00 -1.7960e-03  2.2977e-01  2.6525e+00\nBiu                 4.1574e-01 -5.5599e-03  5.3008e-01  5.7865e-01\nBodinga             7.2515e-03 -1.0669e-05  1.6430e-03  1.7916e-01\nBogoro              2.1023e-01 -1.7804e-03  4.5732e-01  3.1350e-01\nBoki                2.9503e-01 -2.0454e-04  3.1493e-02  1.6636e+00\nBokkos              1.7415e-01 -6.0246e-04  7.7167e-02  6.2908e-01\nBoluwaduro          4.7832e-03 -2.2387e-06  4.3151e-04  2.3037e-01\nBomadi              8.7455e-01 -1.3641e-03  2.0978e-01  1.9124e+00\nBonny               1.3069e+00 -5.5599e-03  7.0862e-01  1.5591e+00\nBorgu               9.8178e-02 -1.2976e-03  1.1029e-01  2.9953e-01\nBoripe              1.9169e-02 -6.0012e-05  7.6910e-03  2.1926e-01\nBosso               1.6357e-01 -1.2562e-03  1.6079e-01  4.1104e-01\nBrass               7.6923e-01 -1.1259e-03  4.3468e-01  1.1684e+00\nBuji                1.8910e+00 -3.1403e-03  4.8208e-01  2.7281e+00\nBukkuyum            5.2013e-01 -1.1068e-03  1.7026e-01  1.2632e+00\nBungudu             7.6390e-01 -7.7515e-04  9.9270e-02  2.4270e+00\nBunkure             1.1769e+00 -1.5561e-03  1.7045e-01  2.8543e+00\nBunza               1.4239e-01 -1.2473e-04  1.9206e-02  1.0284e+00\nBursari             1.3298e+00 -2.2069e-03  2.1111e-01  2.8990e+00\nBuruku              2.6607e-01 -2.5017e-04  3.2054e-02  1.4875e+00\nBurutu              3.1024e-01 -1.0788e-04  2.0791e-02  2.1523e+00\nBwari              -4.2961e-03 -1.0557e-06  2.0348e-04 -3.0110e-01\nCalabar.Municipal   1.1039e+00 -1.8731e-03  4.8110e-01  1.5942e+00\nCalabar.South       6.2788e-01 -1.2536e-03  2.4133e-01  1.2807e+00\nChanchaga          -2.1991e-01 -6.4428e-05  4.9864e-02 -9.8451e-01\nCharanchi           8.8043e-01 -1.4128e-03  1.8082e-01  2.0738e+00\nChibok              4.5784e-01 -1.4842e-03  3.8135e-01  7.4379e-01\nChikun             -4.6925e-01 -5.4908e-03  5.2353e-01 -6.4094e-01\nDala                7.2407e-01 -3.0516e-04  5.8801e-02  2.9872e+00\nDamaturu           -1.7542e-01 -3.9853e-03  6.1128e-01 -2.1927e-01\nDamban             -3.7079e-01 -3.1857e-04  4.0816e-02 -1.8337e+00\nDambatta            9.2220e-01 -4.7683e-04  7.3395e-02  3.4058e+00\nDamboa              8.0651e-01 -5.4908e-03  5.2353e-01  1.1222e+00\nDan.Musa            1.9265e+00 -3.3994e-03  3.7169e-01  3.1655e+00\nDandi               3.7744e-02 -8.9706e-04  1.7275e-01  9.2969e-02\nDandume             1.2653e-01 -3.6013e-04  6.9389e-02  4.8172e-01\nDange.Shuni         3.2117e-01 -2.7700e-04  3.0382e-02  1.8442e+00\nDanja               1.6208e-01 -7.2107e-05  9.2408e-03  1.6868e+00\nDarazo              2.8647e-03 -5.4017e-08  5.9263e-06  1.1768e+00\nDass                2.1308e+00 -4.0483e-03  1.5583e+00  1.7102e+00\nDaura              -4.6258e-01 -1.3354e-03  3.4317e-01 -7.8737e-01\nDawakin.Kudu        9.2979e-01 -9.1063e-04  1.1660e-01  2.7255e+00\nDawakin.Tofa        3.0536e+00 -4.3888e-03  5.6002e-01  4.0863e+00\nDegema              5.9308e-01 -3.5402e-04  3.3929e-02  3.2217e+00\nDekina              7.1070e-01 -7.2509e-04  1.3966e-01  1.9037e+00\nDemsa               8.6919e-01 -1.6207e-03  1.7752e-01  2.0668e+00\nDikwa               3.2982e+00 -5.4908e-03  6.9986e-01  3.9491e+00\nDoguwa              4.0554e-01 -1.8899e-04  2.4217e-02  2.6072e+00\nDoma               -1.6229e-01 -2.3829e-04  2.0276e-02 -1.1380e+00\nDonga               9.6987e-02 -1.1270e-04  1.0804e-02  9.3418e-01\nDukku               9.5121e-03 -2.7288e-03  2.9856e-01  2.2402e-02\nDunukofia          -1.6202e-01 -2.6914e-05  4.1446e-03 -2.5162e+00\nDutse               2.9765e+00 -5.2757e-03  5.0313e-01  4.2038e+00\nDutsi               2.5512e-01 -5.9489e-04  6.5228e-02  1.0012e+00\nDutsin.Ma           1.3595e+00 -1.7918e-03  2.2924e-01  2.8432e+00\nEastern.Obolo       4.0241e-01 -2.5315e-03  3.8885e-01  6.4939e-01\nEbonyi              2.3098e-01 -1.1611e-03  1.4864e-01  6.0212e-01\nEdati               1.0911e-01 -5.4013e-05  2.0875e-02  7.5559e-01\nEde.North          -1.7807e-02 -5.2648e-04  1.3541e-01 -4.6960e-02\nEde.South          -2.5457e-04 -6.1754e-07  5.2558e-05 -3.5030e-02\nEdu                -2.7162e-03 -8.6309e-07  1.3291e-04 -2.3552e-01\nEfon                1.6204e-01 -1.9684e-03  3.7866e-01  2.6652e-01\nEgbado.North        4.8415e-01 -1.9684e-03  3.0254e-01  8.8379e-01\nEgbado.South       -1.3469e+00 -2.1800e-03  3.3498e-01 -2.3233e+00\nEgbeda              2.2001e-01 -6.2780e-04  9.6619e-02  7.0981e-01\nEgbedore           -1.6036e-02 -4.5969e-05  4.4070e-03 -2.4087e-01\nEgor               -2.7541e-03 -6.8986e-06  1.7752e-03 -6.5203e-02\nEhime.Mbano         1.1104e-01 -2.0360e-05  3.1353e-03  1.9835e+00\nEjigbo             -3.5098e-02 -4.6851e-04  5.1377e-02 -1.5278e-01\nEkeremor            1.2874e+00 -3.1450e-03  6.0428e-01  1.6602e+00\nEket               -9.4306e-02 -4.6120e-05  8.8891e-03 -9.9976e-01\nEkiti               3.2060e-01 -2.0987e-04  2.6892e-02  1.9563e+00\nEkiti.East         -2.7430e-01 -4.7116e-04  7.2523e-02 -1.0168e+00\nEkiti.South.West    1.7881e-01 -1.8314e-04  2.0089e-02  1.2629e+00\nEkiti.West          2.2435e-02 -2.8007e-06  2.6851e-04  1.3693e+00\nEkwusigo            2.0893e+00 -4.3350e-03  6.6469e-01  2.5680e+00\nEleme               2.3945e+00 -5.5599e-03  7.0862e-01  2.8512e+00\nEmohua              4.8121e-01 -6.2549e-04  5.9930e-02  1.9682e+00\nEmure              -4.6937e-03 -6.0413e-05  9.3030e-03 -4.8037e-02\nEnugu.East         -2.9007e-01 -2.6868e-04  4.1366e-02 -1.4249e+00\nEnugu.North        -7.4185e-01 -2.4788e-03  3.8078e-01 -1.1982e+00\nEnugu.South         9.6163e-02 -1.3235e-04  3.4053e-02  5.2183e-01\nEpe                 3.5145e-02 -8.9550e-05  8.5847e-03  3.8028e-01\nEsan.Central        2.9234e-01 -1.7289e-03  3.3266e-01  5.0986e-01\nEsan.North.East     2.2711e-01 -1.6602e-04  2.5563e-02  1.4215e+00\nEsan.South.East     1.7003e-01 -1.0001e-03  8.5032e-02  5.8653e-01\nEsan.West           4.9980e-02 -1.7140e-05  2.1967e-03  1.0667e+00\nEse.Odo             2.7952e-01 -4.2136e-04  6.4861e-02  1.0992e+00\nEsit...Eket         5.4953e-01 -1.3641e-03  1.7459e-01  1.3184e+00\nEssien.Udim         5.6306e-01 -6.4513e-04  7.0733e-02  2.1195e+00\nEtche              -6.5301e-01 -1.8320e-03  2.0063e-01 -1.4538e+00\nEthiope.East        2.5649e-01 -4.0160e-04  7.7377e-02  9.2351e-01\nEthiope.West        4.7680e-01 -7.0369e-04  1.0829e-01  1.4510e+00\nEti.Osa            -3.6394e-01 -1.8720e-03  2.8775e-01 -6.7496e-01\nEtim.Ekpo           5.8670e-01 -4.6786e-04  5.9935e-02  2.3984e+00\nEtinan              3.5572e-01 -1.6096e-03  2.4747e-01  7.1830e-01\nEtsako.Central      2.4331e-01 -4.6001e-04  7.0808e-02  9.1610e-01\nEtsako.East         1.0191e-01 -1.0788e-04  9.1805e-03  1.0647e+00\nEtsako.West        -2.5196e-01 -6.2549e-04  6.8581e-02 -9.5973e-01\nEtung               6.5121e-01 -1.0663e-03  2.7410e-01  1.2459e+00\nEwekoro             2.9550e-01 -1.2158e-03  1.5564e-01  7.5211e-01\nEzeagu              1.9160e+00 -2.5786e-03  3.9608e-01  3.0485e+00\nEzinihitte          1.0567e+00 -1.1751e-03  1.8074e-01  2.4883e+00\nEzza.North          2.5263e-01 -2.5935e-04  3.3231e-02  1.3873e+00\nEzza.South          1.8248e-01 -1.0371e-04  1.5969e-02  1.4449e+00\nFagge               1.8406e+00 -4.2414e-03  6.5039e-01  2.2875e+00\nFakai               2.1626e-02 -2.2596e-03  2.4734e-01  4.8028e-02\nFaskari             6.3493e-01 -1.6421e-03  1.5717e-01  1.6057e+00\nFika                8.4662e-02 -1.8720e-03  1.5903e-01  2.1699e-01\nFufore              1.6762e+00 -5.5599e-03  7.0862e-01  1.9979e+00\nFunakaye            6.8556e-02 -1.5096e-04  2.3245e-02  4.5065e-01\nFune                9.6563e-01 -1.2097e-03  1.1584e-01  2.8407e+00\nFuntua              7.4473e-01 -1.4792e-03  2.2746e-01  1.5646e+00\nGabasawa            2.6863e+00 -4.9954e-03  6.3703e-01  3.3719e+00\nGada               -1.7946e-01 -4.6873e-04  9.0305e-02 -5.9562e-01\nGagarawa            2.2894e+00 -4.0374e-03  5.1536e-01  3.1948e+00\nGamawa              6.1790e-01 -6.3673e-04  8.1555e-02  2.1659e+00\nGanjuwa             9.7234e-01 -2.9567e-03  2.8263e-01  1.8345e+00\nGanye               4.3876e-01 -4.6097e-04  8.8810e-02  1.4738e+00\nGarki               1.9960e+00 -1.9976e-03  1.9113e-01  4.5702e+00\nGarko               1.4842e+00 -3.1574e-03  3.4531e-01  2.5312e+00\nGarum.Mallam        1.1960e+00 -1.2494e-03  1.9216e-01  2.7311e+00\nGashaka            -1.0811e-02 -1.4608e-05  2.8157e-03 -2.0346e-01\nGassol              3.0202e-02 -2.4825e-04  3.1809e-02  1.7073e-01\nGaya                2.5989e+00 -5.2223e-03  1.0013e+00  2.6024e+00\nGbako               1.9408e-01 -1.3691e-04  2.1081e-02  1.3377e+00\nGboko               1.6909e-01 -2.7644e-04  4.2559e-02  8.2098e-01\nGeidam             -6.5668e-01 -5.4908e-03  6.9986e-01 -7.7840e-01\nGezawa              9.7956e-01 -6.8831e-04  1.0592e-01  3.0119e+00\nGiade               9.3108e-01 -9.8074e-04  1.8885e-01  2.1448e+00\nGirei               1.7277e+00 -2.9968e-03  4.6011e-01  2.5515e+00\nGiwa                1.5031e-02 -2.4538e-05  2.0883e-03  3.2946e-01\nGokana              5.6802e-03 -5.4017e-08  1.0412e-05  1.7604e+00\nGombe               1.0677e-01 -6.8272e-05  2.6385e-02  6.5770e-01\nGombi               7.5165e-01 -4.7116e-04  6.0357e-02  3.0614e+00\nGoronyo            -3.8126e-01 -4.4123e-04  5.6525e-02 -1.6018e+00\nGubio               2.9198e+00 -5.4908e-03  8.4093e-01  3.1900e+00\nGudu                5.2192e-02 -1.1919e-04  3.0668e-02  2.9871e-01\nGujba              -5.5458e-01 -5.4908e-03  5.9910e-01 -7.0941e-01\nGulani              1.0040e-03 -5.4017e-08  5.9263e-06  4.1245e-01\nGuma                1.2776e-01 -1.1182e-03  9.5062e-02  4.1799e-01\nGumel               7.3493e-01 -3.3422e-04  8.5977e-02  2.5076e+00\nGummi               3.3977e-01 -7.8223e-04  8.5753e-02  1.1629e+00\nGurara             -5.7407e-02 -2.7108e-05  2.9740e-03 -1.0522e+00\nGuri                2.6293e+00 -4.3996e-03  4.8057e-01  3.7992e+00\nGusau               5.8616e-01 -5.5043e-04  5.2742e-02  2.5547e+00\nGuyuk               7.4804e-03 -5.4017e-08  1.0412e-05  2.3183e+00\nGuzamala            4.2444e+00 -5.4908e-03  6.9986e-01  5.0801e+00\nGwadabawa           8.4651e-03 -6.4913e-05  8.3190e-03  9.3522e-02\nGwagwalada         -5.8389e-03 -6.0710e-05  7.7803e-03 -6.5508e-02\nGwale               1.5271e+00 -2.2080e-03  4.2466e-01  2.3468e+00\nGwandu              5.7111e-02 -2.2881e-05  4.4101e-03  8.6033e-01\nGwaram              1.8086e+00 -3.2960e-03  3.1496e-01  3.2285e+00\nGwarzo              1.7377e+00 -3.2444e-03  4.1447e-01  2.7041e+00\nGwer.East           1.2891e-01 -5.4593e-04  4.6438e-02  6.0074e-01\nGwer.West           6.2333e-01 -3.5930e-03  4.5884e-01  9.2552e-01\nGwiwa               7.6666e-01 -8.3723e-04  1.0721e-01  2.3440e+00\nGwoza               2.8252e+00 -5.4908e-03  1.0525e+00  2.7591e+00\nHadejia             4.1593e-01 -9.0706e-05  2.3339e-02  2.7231e+00\nHawul               2.4371e+00 -4.2606e-03  6.5333e-01  3.0204e+00\nHong               -1.8562e-02 -1.3987e-03  1.7901e-01 -4.0567e-02\nIbadan.North        1.8725e-02 -4.8859e-05  7.5238e-03  2.1643e-01\nIbadan.North.East  -3.4596e-02 -1.2889e-04  1.6517e-02 -2.6819e-01\nIbadan.North.West   2.5620e-01 -6.2549e-04  9.6264e-02  8.2775e-01\nIbadan.South.East   3.5158e-02 -2.8059e-04  4.3198e-02  1.7051e-01\nIbadan.South.West   1.6777e-01 -7.4668e-04  1.4381e-01  4.4437e-01\nIbaji               7.6369e-01 -1.8916e-03  2.0714e-01  1.6821e+00\nIbarapa.Central     1.2280e-01 -3.3800e-05  5.2049e-03  1.7026e+00\nIbarapa.East        3.0908e-01 -3.5025e-04  4.4874e-02  1.4607e+00\nIbarapa.North       1.3543e-01 -5.2939e-05  8.1520e-03  1.5006e+00\nIbeju.Lekki        -1.8869e-02 -2.0859e-06  8.0618e-04 -6.6450e-01\nIbeno               3.0110e-01 -2.1416e-04  3.2972e-02  1.6594e+00\nIbesikpo.Asutan     9.1090e-02 -2.7812e-05  4.2828e-03  1.3923e+00\nIbi                -1.7013e-01 -1.2344e-04  1.3541e-02 -1.4610e+00\nIbiono.Ibom         2.5256e-01 -2.4964e-04  3.1987e-02  1.4135e+00\nIdah                3.1760e-01 -3.4841e-04  8.9625e-02  1.0620e+00\nIdanre              2.2034e-02 -3.0090e-05  2.5609e-03  4.3600e-01\nIdeato.North        1.2497e+00 -1.7845e-03  1.7078e-01  3.0284e+00\nIdeato.South        6.7644e-01 -8.3256e-04  1.6034e-01  1.6914e+00\nIdemili.North       1.3872e+00 -3.4727e-03  3.7968e-01  2.2569e+00\nIdemili.South       1.8411e+00 -3.0821e-03  3.9380e-01  2.9388e+00\nIdo                -2.5138e-02 -1.4752e-05  1.4143e-03 -6.6806e-01\nIdo.Osi             3.7306e-01 -2.3267e-04  3.5822e-02  1.9723e+00\nIfako.Ijaye        -3.2350e-03 -1.5117e-05  2.3280e-03 -6.6734e-02\nIfe.Central         8.5525e-02 -3.2795e-04  6.3191e-02  3.4153e-01\nIfe.East            8.2340e-02 -2.3219e-04  4.4744e-02  3.9036e-01\nIfe.North           1.8887e-02 -1.9469e-06  2.1359e-04  1.2925e+00\nIfe.South           1.4740e-02 -2.0678e-06  2.6501e-04  9.0559e-01\nIfedayo             2.9681e-01 -4.4123e-04  5.6525e-02  1.2503e+00\nIfedore             4.7981e-02 -2.1416e-04  2.3490e-02  3.1446e-01\nIfelodun            1.9601e-02 -2.5563e-05  1.7754e-03  4.6580e-01\nIfelodun.1          7.3274e-02 -6.0246e-04  1.5494e-01  1.8768e-01\nIfo                 9.9888e-02 -3.5725e-03  3.0297e-01  1.8796e-01\nIgabi              -1.9002e-01 -1.2272e-03  1.0432e-01 -5.8454e-01\nIgalamela.Odolu     2.5957e-01 -1.4778e-04  1.2575e-02  2.3160e+00\nIgbo.Etiti          1.0498e+00 -1.1259e-03  1.7320e-01  2.5253e+00\nIgbo.Eze.North      5.6833e-02 -1.0938e-05  1.6844e-03  1.3851e+00\nIgbo.Eze.South      3.3575e-01 -2.9782e-04  5.7388e-02  1.4028e+00\nIgueben             5.8089e-01 -1.9684e-03  2.5179e-01  1.1616e+00\nIhiala              1.3951e+00 -1.7913e-03  1.9618e-01  3.1538e+00\nIhitte.Uboma        6.8700e-01 -1.3641e-03  2.0978e-01  1.5029e+00\nIjebu.East          6.2914e-01 -2.5122e-03  2.1327e-01  1.3678e+00\nIjebu.North         7.5291e-01 -1.7289e-03  1.6546e-01  1.8552e+00\nIjebu.North.East    4.8901e-01 -8.7028e-04  1.6760e-01  1.1966e+00\nIjebu.Ode          -4.6438e-02 -7.8154e-06  1.5064e-03 -1.1963e+00\nIjero               4.3236e-01 -7.3936e-04  1.1378e-01  1.2840e+00\nIjumu               9.2798e-03 -9.7249e-07  9.3235e-05  9.6115e-01\nIka                 1.2817e+00 -2.4828e-03  4.7737e-01  1.8587e+00\nIka.North.East     -1.4366e+00 -5.5599e-03  8.5145e-01 -1.5509e+00\nIka.South          -3.2906e-01 -1.1872e-03  2.2856e-01 -6.8581e-01\nIkara               1.4264e+00 -3.1492e-03  3.4441e-01  2.4360e+00\nIkeduru             1.2307e+00 -2.9461e-03  4.5236e-01  1.8342e+00\nIkeja               2.0795e-01 -3.2151e-04  3.0814e-02  1.1865e+00\nIkenne              7.0197e-01 -1.2234e-03  2.3553e-01  1.4490e+00\nIkere               7.5995e-02 -5.5334e-04  8.5167e-02  2.6230e-01\nIkole               2.6632e-01 -5.8938e-04  6.4624e-02  1.0500e+00\nIkom                6.2420e-01 -7.9768e-04  1.0215e-01  1.9555e+00\nIkono               1.8919e-01 -1.6247e-04  1.7822e-02  1.4184e+00\nIkorodu            -8.8029e-02 -4.9649e-05  7.6455e-03 -1.0062e+00\nIkot.Abasi          1.7664e-01 -1.0041e-04  1.5461e-02  1.4214e+00\nIkot.Ekpene         5.2778e-01 -7.1042e-04  1.8268e-01  1.2365e+00\nIkpoba.Okha         6.5055e-02 -7.7046e-05  8.4522e-03  7.0845e-01\nIkwerre             2.1793e-01 -4.2974e-03  8.2476e-01  2.4470e-01\nIkwo                3.0349e-01 -1.7508e-03  2.2400e-01  6.4495e-01\nIkwuano             1.3876e+00 -3.1402e-03  4.0120e-01  2.1957e+00\nIla                 4.3019e-02 -7.7274e-05  8.4773e-03  4.6808e-01\nIlaje               3.6103e-02 -5.4325e-06  1.0471e-03  1.1159e+00\nIle.Oluji.Okeigbo   2.3792e-01 -5.6796e-04  8.7416e-02  8.0661e-01\nIlejemeji           8.0284e-01 -1.7845e-03  3.4334e-01  1.3732e+00\nIlesha.East         5.0140e-02 -9.8567e-05  1.8997e-02  3.6450e-01\nIlesha.West         2.1295e-03 -2.8505e-07  5.4942e-05  2.8734e-01\nIllela             -2.3052e-02 -9.8085e-05  2.5238e-02 -1.4449e-01\nIlorin.East         2.9492e-01 -7.6665e-04  1.4766e-01  7.6949e-01\nIlorin.South        2.3583e-01 -3.6787e-04  7.0880e-02  8.8718e-01\nIlorin.West         2.4523e-01 -3.6787e-04  5.6630e-02  1.0321e+00\nImeko.Afon          5.6488e-01 -3.1450e-03  4.8279e-01  8.1750e-01\nIngawa              1.6643e+00 -3.4571e-03  2.9321e-01  3.0800e+00\nIni                 3.9539e-01 -2.5366e-04  3.2502e-02  2.1946e+00\nIpokia              2.0113e-01 -4.9219e-04  9.4821e-02  6.5477e-01\nIrele               3.7255e-01 -5.2149e-04  1.0046e-01  1.1770e+00\nIrepo               6.4935e-02 -1.2335e-04  2.3773e-02  4.2195e-01\nIrepodun            5.0577e-02 -1.8199e-04  2.3321e-02  3.3239e-01\nIrepodun.1          2.5170e-02 -1.6451e-05  4.2333e-03  3.8710e-01\nIrepodun.Ifelodun   2.3311e-01 -4.0641e-04  3.8948e-02  1.1833e+00\nIrewole             6.8222e-02 -5.0892e-05  7.8368e-03  7.7122e-01\nIsa                 7.1717e-01 -2.4324e-03  3.1099e-01  1.2904e+00\nIse.Orun           -1.7335e-01 -5.5668e-04  7.1306e-02 -6.4710e-01\nIseyin              3.2963e-01 -1.3128e-03  1.2570e-01  9.3345e-01\nIshielu             5.0110e-01 -8.7748e-04  9.6186e-02  1.6186e+00\nIsi.Uzo             1.2534e+00 -5.1175e-03  4.3332e-01  1.9119e+00\nIsiala.Ngwa.North   1.1788e+00 -1.5227e-03  2.3413e-01  2.4393e+00\nIsiala.Ngwa.South   1.2983e+00 -1.5411e-03  1.6881e-01  3.1635e+00\nIsiala.Mbano        3.4740e-01 -1.3235e-04  1.6960e-02  2.6686e+00\nIsin               -9.1883e-02 -2.5786e-04  6.6338e-02 -3.5574e-01\nIsiukwuato          4.4250e-01 -2.4364e-04  3.7511e-02  2.2860e+00\nIsokan              2.6121e-01 -1.8679e-04  2.8760e-02  1.5414e+00\nIsoko.North         6.5265e-02 -2.8633e-04  5.5173e-02  2.7907e-01\nIsoko.South         1.2591e-01 -8.2068e-05  1.2637e-02  1.1208e+00\nIsu                 9.9229e-01 -9.4491e-04  1.8196e-01  2.3285e+00\nItas.Gadau          1.2032e+00 -1.0877e-03  1.0417e-01  3.7314e+00\nItesiwaju          -1.3070e-01 -9.3216e-05  1.7965e-02 -9.7438e-01\nItu                 6.7509e-01 -1.5533e-03  2.9892e-01  1.2376e+00\nIvo                 1.2784e+00 -2.5451e-03  3.2536e-01  2.2457e+00\nIwajowa             5.5080e-02 -1.2653e-05  1.6216e-03  1.3681e+00\nIwo                -2.5717e-02 -2.3797e-05  3.6646e-03 -4.2444e-01\nIzzi                3.7413e-01 -1.6819e-03  2.5858e-01  7.3905e-01\nJaba               -1.4577e-01 -2.4964e-04  3.8435e-02 -7.4227e-01\nJada                3.7308e-01 -1.1775e-04  3.0298e-02  2.1441e+00\nJahun               2.7415e+00 -2.8868e-03  3.6892e-01  4.5183e+00\nJakusko             1.9671e+00 -3.3148e-03  3.6247e-01  3.2728e+00\nJalingo            -5.4184e-03 -1.6620e-05  4.2767e-03 -8.2600e-02\nJama.are            9.1995e-01 -9.5538e-04  1.8397e-01  2.1470e+00\nJega                1.3113e-02 -1.0536e-05  1.3503e-03  3.5714e-01\nJema.a             -2.2268e-02 -2.1048e-05  2.6975e-03 -4.2834e-01\nJere               -4.4934e-03 -5.4017e-08  1.0412e-05 -1.3925e+00\nJibia               4.3860e-01 -5.9967e-04  9.2293e-02  1.4457e+00\nJos.East            2.0685e-02 -7.1631e-04  9.1739e-02  7.0657e-02\nJos.North          -2.4898e-02 -6.3482e-06  1.2236e-03 -7.1160e-01\nJos.South           7.1923e-01 -1.5304e-03  2.3531e-01  1.4858e+00\nKabba.Bunu          1.8138e-02 -7.9656e-06  1.0209e-03  5.6791e-01\nKabo                1.6248e+00 -2.1800e-03  2.3865e-01  3.3305e+00\nKachia             -1.0588e-02 -2.7793e-04  3.0484e-02 -5.9052e-02\nKaduna.North        1.6235e-01 -2.2942e-04  5.9024e-02  6.6918e-01\nKaduna.South       -2.1626e+00 -4.5607e-03  1.1683e+00 -1.9966e+00\nKafin.Hausa         3.0932e+00 -5.4701e-03  6.9724e-01  3.7109e+00\nKafur               1.1703e+00 -1.9668e-03  2.5158e-01  2.3372e+00\nKaga                2.1231e-01 -5.4908e-03  8.4093e-01  2.3751e-01\nKagarko            -2.1042e-01 -8.0061e-04  8.7767e-02 -7.0757e-01\nKaiama              5.4492e-02 -6.6762e-05  8.5560e-03  5.8983e-01\nKaita               3.2305e-01 -6.3375e-04  8.1173e-02  1.1361e+00\nKajola              3.0621e-02 -1.5552e-05  4.0019e-03  4.8429e-01\nKajuru              6.4273e-01 -4.8117e-03  4.0755e-01  1.0143e+00\nKala.Balge          4.2444e+00 -5.4908e-03  1.4052e+00  3.5852e+00\nKalgo              -2.3950e-01 -6.7397e-04  1.0372e-01 -7.4158e-01\nKaltungo            2.3426e-03 -1.1851e-03  1.8229e-01  8.2627e-03\nKanam              -2.0114e-01 -6.9826e-04  7.6555e-02 -7.2445e-01\nKankara             1.6789e+00 -2.1595e-03  2.3641e-01  3.4574e+00\nKanke              -7.7277e-03 -4.3701e-06  6.7298e-04 -2.9772e-01\nKankia              1.2751e+00 -1.3004e-03  1.4249e-01  3.3815e+00\nKano.Municipal      1.5013e+00 -1.6486e-03  2.5346e-01  2.9853e+00\nKarasuwa            1.8830e+00 -1.9322e-03  2.9699e-01  3.4587e+00\nKaraye              3.6126e-01 -1.3031e-04  2.0064e-02  2.5514e+00\nKarim.Lamido       -9.5393e-02 -3.6248e-04  2.7719e-02 -5.7079e-01\nKaru               -8.7872e-03 -7.3691e-05  6.2713e-03 -1.1003e-01\nKatagum             5.0793e-01 -7.1234e-04  7.8097e-02  1.8201e+00\nKatcha             -3.3478e-02 -8.9965e-06  1.3854e-03 -8.9919e-01\nKatsina             4.0832e-01 -5.7043e-04  1.4671e-01  1.0675e+00\nKatsina.Ala         4.8151e-01 -6.3364e-04  6.9474e-02  1.8292e+00\nKaugama             2.8930e+00 -4.3825e-03  4.1832e-01  4.4797e+00\nKaura               2.2722e-01 -1.5271e-04  2.9430e-02  1.3254e+00\nKaura.Namoda        1.0720e+00 -2.0099e-03  3.8662e-01  1.7273e+00\nKauru               1.9248e-01 -7.9303e-04  1.2203e-01  5.5327e-01\nKazaure             9.5309e-01 -1.0656e-03  1.1679e-01  2.7921e+00\nKeana               2.3540e-02 -7.0950e-06  1.3675e-03  6.3674e-01\nKebbe               3.7917e-02 -5.1855e-05  6.6457e-03  4.6576e-01\nKeffi               3.1357e-01 -1.7425e-03  6.7228e-01  3.8456e-01\nKhana              -1.9451e-03 -3.5504e-06  3.0217e-04 -1.1169e-01\nKibiya              1.2840e+00 -2.1113e-03  4.0608e-01  2.0182e+00\nKirfi              -5.8961e-02 -3.3043e-05  5.0885e-03 -8.2610e-01\nKiri.Kasamma        1.7669e+00 -2.0046e-03  2.5640e-01  3.4935e+00\nKiru                1.0978e+00 -1.5366e-03  1.6833e-01  2.6794e+00\nKiyawa              2.2474e+00 -2.4788e-03  3.8078e-01  3.6460e+00\nKogi               -1.3312e-01 -2.1416e-04  3.2972e-02 -7.3191e-01\nKoko.Besse         -5.8463e-03 -6.1901e-04  7.9286e-02 -1.8564e-02\nKokona              1.3228e-01 -1.1775e-04  1.1288e-02  1.2462e+00\nKolokuma.Opokuma   -1.2228e+00 -3.5639e-03  9.1383e-01 -1.2755e+00\nKonduga            -8.7730e-01 -6.2549e-04  4.7819e-02 -4.0090e+00\nKonshisha           6.1304e-02 -2.4160e-05  2.6505e-03  1.1912e+00\nKontagora          -9.6960e-02 -1.9593e-04  5.0410e-02 -4.3098e-01\nKosofe             -1.7897e-01 -1.4962e-03  2.8795e-01 -3.3073e-01\nKubau               1.6747e+00 -3.9433e-03  6.0486e-01  2.1584e+00\nKudan              -1.4262e-01 -8.8758e-05  1.1375e-02 -1.3365e+00\nKuje               -1.0427e-02 -2.2028e-04  3.3916e-02 -5.5425e-02\nKukawa              4.2444e+00 -5.4908e-03  1.4052e+00  3.5852e+00\nKumbotso            1.7748e+00 -2.3358e-03  1.7826e-01  4.2091e+00\nKunchi              2.0552e+00 -3.3994e-03  6.5300e-01  2.5475e+00\nKura                7.9668e-01 -6.6391e-04  1.2788e-01  2.2297e+00\nKurfi               6.9795e-01 -6.4979e-04  1.0000e-01  2.2092e+00\nKurmi               6.1716e-02 -1.0788e-04  1.6611e-02  4.7968e-01\nKusada              2.3688e+00 -4.9270e-03  9.4498e-01  2.4419e+00\nKwali              -6.5027e-02 -1.4221e-04  3.6590e-02 -3.3921e-01\nKwami               2.4531e-01 -5.0908e-04  6.5213e-02  9.6260e-01\nKwande              6.6621e-01 -1.5939e-03  2.0396e-01  1.4787e+00\nKware               3.4928e-01 -3.5938e-04  3.4442e-02  1.8840e+00\nKwaya.Kusar         1.1871e+00 -6.2549e-04  1.2049e-01  3.4216e+00\nLafia              -6.3538e-02 -2.8778e-04  2.7582e-02 -3.8085e-01\nLagelu              2.3551e-02 -1.2246e-04  1.3434e-02  2.0425e-01\nLagos.Island       -1.2037e-02 -9.2216e-04  1.7758e-01 -2.6375e-02\nLagos.Mainland      2.1997e-01 -8.1507e-04  1.2542e-01  6.2342e-01\nLamurde             5.9161e-01 -5.5599e-03  7.0862e-01  7.0940e-01\nLangtang.North      2.5488e-01 -1.7026e-04  1.8676e-02  1.8663e+00\nLangtang.South      4.7782e-01 -2.0262e-03  3.8975e-01  7.6861e-01\nLapai               4.0762e-02 -1.5436e-03  1.9753e-01  9.5189e-02\nLau                -2.4691e-01 -1.3440e-04  1.2884e-02 -2.1741e+00\nLavun              -7.7480e-04 -5.0770e-04  9.7808e-02 -8.5407e-04\nLere                3.8706e-01 -2.4285e-04  3.7389e-02  2.0030e+00\nLogo                6.2300e-01 -1.1321e-03  1.7415e-01  1.4956e+00\nLokoja             -5.4391e-02 -1.0781e-03  8.2383e-02 -1.8574e-01\nMachina             1.9519e+00 -2.1566e-03  3.3139e-01  3.3945e+00\nMadagali            9.3284e-01 -5.4908e-03  1.0525e+00  9.1462e-01\nMadobi              1.8813e+00 -3.0279e-03  2.8941e-01  3.5028e+00\nMafa                2.5886e+00 -5.4908e-03  6.9986e-01  3.1009e+00\nMagama              2.7683e-03 -2.9552e-06  3.7875e-04  1.4240e-01\nMagumeri           -7.0780e-01 -1.7246e-03  1.8888e-01 -1.6246e+00\nMai.adua            7.0668e-02 -7.7803e-05  1.1981e-02  6.4634e-01\nMaiduguri           2.2582e-01 -5.3578e-04  2.0697e-01  4.9756e-01\nMaigatari           1.4571e+00 -1.4315e-03  2.2014e-01  3.1086e+00\nMaiha               5.7574e-01 -1.5670e-03  3.0155e-01  1.0513e+00\nMaiyama             6.8797e-02 -3.2652e-05  4.1847e-03  1.0640e+00\nMakoda              2.4090e+00 -5.1495e-03  5.6205e-01  3.2202e+00\nMakurdi            -1.9437e-01 -9.8564e-05  1.8996e-02 -1.4095e+00\nMalam.Madori        2.3113e+00 -4.2414e-03  6.5039e-01  2.8712e+00\nMalumfashi          1.9593e+00 -2.3270e-03  3.5752e-01  3.2807e+00\nMangu               2.6187e-01 -4.9950e-04  6.3987e-02  1.0372e+00\nMani                3.5787e-01 -2.5999e-04  3.3313e-02  1.9622e+00\nMaradun             9.1219e-01 -8.7946e-04  7.4784e-02  3.3389e+00\nMariga             -5.9671e-03 -5.2319e-06  4.4527e-04 -2.8253e-01\nMarkafi             1.1182e+00 -4.9918e-03  9.5735e-01  1.1479e+00\nMarte               4.2444e+00 -5.4908e-03  1.0525e+00  4.1425e+00\nMaru                4.2377e-01 -9.5757e-04  8.1419e-02  1.4885e+00\nMashegu            -3.0298e-01 -6.9247e-04  6.6343e-02 -1.1736e+00\nMashi               3.8439e-02 -7.1264e-06  1.3736e-03  1.0373e+00\nMatazu              1.3761e+00 -1.4131e-03  2.7199e-01  2.6413e+00\nMayo.Belwa          5.2949e-01 -1.3987e-03  1.1887e-01  1.5398e+00\nMbaitoli            1.1595e+00 -1.5180e-03  1.2900e-01  3.2325e+00\nMbo                 1.0144e+00 -1.7845e-03  3.4334e-01  1.7342e+00\nMichika            -9.8813e-01 -1.3987e-03  3.5941e-01 -1.6459e+00\nMiga                3.4791e+00 -5.2189e-03  7.9950e-01  3.8967e+00\nMikang              4.5541e-01 -5.6193e-04  1.4452e-01  1.1994e+00\nMinjibir            2.9329e+00 -5.3467e-03  5.8347e-01  3.8466e+00\nMisau               4.7539e-01 -9.8851e-04  1.5208e-01  1.2216e+00\nMkpat.Enin          5.1504e-01 -5.6089e-04  7.1846e-02  1.9236e+00\nMoba                7.7242e-01 -2.0033e-03  2.5624e-01  1.5299e+00\nMobbar              2.5413e+00 -5.4908e-03  8.4093e-01  2.7772e+00\nMokwa               1.4838e-01 -2.5222e-04  1.3706e-02  1.2696e+00\nMonguno             4.2444e+00 -5.4908e-03  8.4093e-01  4.6344e+00\nMopa.Muro           2.3223e-01 -6.6036e-04  1.6982e-01  5.6514e-01\nMoro                8.7692e-02 -1.3691e-04  1.1651e-02  8.1369e-01\nMubi.North         -6.6379e-01 -5.4908e-03  1.0525e+00 -6.4167e-01\nMubi.South         -5.5055e-02 -5.4908e-03  1.4052e+00 -4.1812e-02\nMusawa              1.7899e+00 -2.7808e-03  2.6586e-01  3.4767e+00\nMushin              7.5030e-01 -1.3987e-03  2.1509e-01  1.6208e+00\nMuya               -4.3026e-02 -7.8133e-05  1.5059e-02 -3.4998e-01\nNafada              1.9462e-02 -2.2944e-05  4.4224e-03  2.9300e-01\nNangere             9.0895e-01 -1.1823e-03  1.5135e-01  2.3394e+00\nNasarawa            6.5762e-02 -2.9552e-06  3.7875e-04  3.3793e+00\nNasarawa.1          1.3774e-02 -5.4325e-06  5.2082e-04  6.0378e-01\nNasarawa.Eggon      7.7920e-02 -2.8890e-05  5.5682e-03  1.0446e+00\nNdokwa.East         5.2593e-02 -6.1273e-05  5.8741e-03  6.8701e-01\nNdokwa.West         1.6027e-01 -2.5366e-04  2.7823e-02  9.6237e-01\nNembe               1.1060e-01 -3.5279e-04  5.4310e-02  4.7609e-01\nNgala               4.2444e+00 -5.4908e-03  1.4052e+00  3.5852e+00\nNganzai             1.8790e+00 -5.4908e-03  5.9910e-01  2.4347e+00\nNgaski              1.3035e-04 -4.7155e-06  6.0436e-04  5.4943e-03\nNgor.Okpala         3.3551e-01 -5.6721e-04  5.4350e-02  1.4416e+00\nNguru               2.5014e+00 -3.7830e-03  5.8037e-01  3.2884e+00\nNingi               1.4057e+00 -2.2179e-03  2.1216e-01  3.0566e+00\nNjaba               1.4952e+00 -4.1202e-03  6.3189e-01  1.8862e+00\nNjikoka             6.6737e-01 -6.7613e-04  8.6597e-02  2.2701e+00\nNkanu.East          2.0649e-01 -3.6248e-04  3.0839e-02  1.1779e+00\nNkanu.West          2.0883e-01 -1.7731e-03  2.7258e-01  4.0339e-01\nNkwerre             3.4770e-01 -1.2166e-04  1.5591e-02  2.7856e+00\nNnewi.North         1.3952e+00 -8.0412e-04  2.0676e-01  3.0702e+00\nNnewi.South         2.1866e+00 -4.8435e-03  4.6211e-01  3.2237e+00\nNsit.Atai           6.6811e-01 -1.5304e-03  2.9453e-01  1.2339e+00\nNsit.Ibom           5.3709e-02 -1.8650e-05  3.5946e-03  8.9612e-01\nNsit.Ubium          1.4664e-01 -9.8085e-05  9.4028e-03  1.5133e+00\nNsukka              1.3710e+00 -2.0158e-03  2.5784e-01  2.7040e+00\nNuman               1.6099e+00 -5.5599e-03  1.0657e+00  1.5648e+00\nNwangele            1.1569e+00 -2.7944e-03  4.2913e-01  1.7703e+00\nObafemi.Owode       5.1306e-01 -4.0160e-04  3.8487e-02  2.6173e+00\nObanliku            4.2926e-01 -5.1253e-04  1.3182e-01  1.1837e+00\nObi                 4.7155e-04 -4.3977e-07  8.4766e-05  5.1265e-02\nObi.1              -2.3062e-01 -1.1259e-03  2.1678e-01 -4.9290e-01\nObi.Ngwa            1.4336e+00 -2.3348e-03  1.9825e-01  3.2251e+00\nObia.Akpor          6.2851e-01 -4.9439e-04  5.4213e-02  2.7015e+00\nObokun             -4.0415e-02 -3.7456e-05  3.1877e-03 -7.1516e-01\nObot.Akara          9.5883e-01 -1.4980e-03  1.6410e-01  2.3706e+00\nObowo               1.0993e+00 -1.8118e-03  2.7850e-01  2.0865e+00\nObubra              5.2459e-01 -5.6142e-04  6.1560e-02  2.1166e+00\nObudu               4.1829e-01 -3.7487e-04  4.8027e-02  1.9104e+00\nOdeda               2.3858e-01 -2.5421e-03  2.7819e-01  4.5715e-01\nOdigbo              5.1286e-01 -1.6314e-03  1.7870e-01  1.2171e+00\nOdo.Otin            3.3453e-02 -3.7515e-05  4.1157e-03  5.2203e-01\nOdogbolu           -5.8226e-02 -9.7874e-06  9.3833e-04 -1.9005e+00\nOdukpani            3.5519e-01 -2.0898e-04  1.4511e-02  2.9503e+00\nOffa                4.7556e-02 -8.5689e-05  6.6317e-02  1.8500e-01\nOfu                 4.1078e-01 -6.7613e-04  7.4130e-02  1.5112e+00\nOgba.Egbema.Ndoni   1.9618e-03 -9.6505e-05  8.2126e-03  2.2712e-02\nOgbadibo            4.7463e-01 -3.6248e-04  5.5801e-02  2.0108e+00\nOgbaru              2.5493e-01 -8.9550e-05  6.8498e-03  3.0814e+00\nOgbia               1.7353e-02 -1.5595e-05  2.4015e-03  3.5441e-01\nOgbomosho.North    -1.0437e-01 -8.1104e-04  2.0854e-01 -2.2677e-01\nOgbomosho.South    -4.4467e-03 -1.1008e-06  2.1217e-04 -3.0520e-01\nOgo.Oluwa          -7.7345e-03 -4.3912e-05  6.7620e-03 -9.3524e-02\nOgoja               6.3698e-01 -9.3240e-04  1.4345e-01  1.6842e+00\nOgori.Magongo       3.1491e-03 -8.2069e-06  3.1719e-03  5.6061e-02\nOgu.Bolo            2.1556e+00 -5.5599e-03  8.5145e-01  2.3421e+00\nOgun.waterside     -2.1100e-01 -1.0562e-04  1.6264e-02 -1.6537e+00\nOguta               8.1240e-01 -2.5073e-03  2.3978e-01  1.6642e+00\nOhafia              1.3740e+00 -1.8320e-03  3.5247e-01  2.3174e+00\nOhaji.Egbema       -2.7797e-02 -1.6283e-04  1.7861e-02 -2.0677e-01\nOhaozara            3.3834e-01 -2.8212e-04  3.6148e-02  1.7810e+00\nOhaukwu             3.4007e-01 -3.8212e-04  7.3625e-02  1.2547e+00\nOhimini             2.7691e-01 -1.5245e-04  2.9379e-02  1.6165e+00\nOji.River           1.7494e+00 -2.9745e-03  2.8432e-01  3.2864e+00\nOjo                 3.9235e-01 -2.3492e-03  4.5173e-01  5.8726e-01\nOju                -9.2693e-01 -3.1416e-03  3.4359e-01 -1.5760e+00\nOke.Ero             1.4525e-01 -1.8967e-04  2.0806e-02  1.0083e+00\nOkehi              -8.6191e-02 -1.1506e-03  1.7698e-01 -2.0214e-01\nOkene              -1.0757e-02 -2.9552e-06  4.5509e-04 -5.0411e-01\nOkigwe              6.8965e-01 -7.2697e-04  6.9646e-02  2.6160e+00\nOkitipupa           3.5736e-01 -9.2974e-04  1.4304e-01  9.4732e-01\nOkobo               4.3835e-01 -5.7003e-04  6.2504e-02  1.7556e+00\nOkpe                3.4323e-01 -8.0412e-04  8.8150e-02  1.1588e+00\nOkpokwu             4.9376e-01 -5.6193e-04  7.1979e-02  1.8425e+00\nOkrika              2.8863e+00 -3.8659e-03  5.9303e-01  3.7531e+00\nOla.oluwa           5.6561e-03 -5.0239e-06  9.6833e-04  1.8192e-01\nOlamabolo           3.4708e-01 -5.0133e-04  5.4975e-02  1.4824e+00\nOlorunda           -1.4756e-02 -5.2249e-06  5.0092e-04 -6.5906e-01\nOlorunsogo          9.2665e-02 -6.7843e-04  7.4381e-02  3.4226e-01\nOluyole             1.7902e-01 -1.9128e-04  1.8335e-02  1.3235e+00\nOmala               9.9082e-01 -2.9171e-03  3.7278e-01  1.6276e+00\nOmumma             -1.1392e+00 -1.5121e-03  2.9101e-01 -2.1090e+00\nOna.Ara             3.0864e-01 -1.3164e-03  1.6849e-01  7.5512e-01\nOndo.East           2.5312e-01 -4.5120e-04  6.9452e-02  9.6217e-01\nOndo.West           3.7049e-01 -5.4354e-04  5.9600e-02  1.5198e+00\nOnicha              8.9052e-02 -4.2980e-05  4.1204e-03  1.3880e+00\nOnitsha.North       1.1281e+00 -3.9268e-03  4.2913e-01  1.7281e+00\nOnitsha.South       2.3532e-01 -1.4778e-04  3.8022e-02  1.2076e+00\nOnna                1.7645e-01 -1.0788e-04  1.3825e-02  1.5016e+00\nOpobo.Nkoro        -1.0817e-01 -4.8859e-05  9.4170e-03 -1.1142e+00\nOredo              -2.1705e-02 -9.8564e-05  2.5361e-02 -1.3568e-01\nOrelope             1.3987e-01 -1.4207e-03  2.1847e-01  3.0228e-01\nOrhionmwon          1.5092e-01 -2.3012e-04  1.4628e-02  1.2497e+00\nOri.Ire             2.1820e-03 -1.1349e-04  1.0879e-02  2.2008e-02\nOriade              1.0042e-01 -9.6285e-05  7.3649e-03  1.1712e+00\nOrlu                4.9367e-01 -3.5025e-04  4.4874e-02  2.3321e+00\nOrolu               4.1911e-02 -3.8375e-04  7.3939e-02  1.5554e-01\nOron               -3.4180e-01 -2.2798e-04  3.5100e-02 -1.8232e+00\nOrsu                2.4948e-01 -5.1852e-05  7.9846e-03  2.7926e+00\nOru.East            1.5079e+00 -2.6244e-03  2.8717e-01  2.8188e+00\nOru.West            1.6688e+00 -2.0333e-03  5.2217e-01  2.3121e+00\nOruk.Anam           6.0027e-01 -2.3915e-03  2.6174e-01  1.1780e+00\nOrumba.North        1.5654e+00 -2.0086e-03  3.0870e-01  2.8212e+00\nOrumba.South        1.7236e+00 -2.2156e-03  2.8333e-01  3.2422e+00\nOse                 2.3419e-01 -8.7028e-04  9.5397e-02  7.6105e-01\nOshimili.North     -6.4778e-01 -2.7081e-03  4.1592e-01 -1.0002e+00\nOshimili.South      1.2137e-02 -8.9965e-06  9.8702e-04  3.8659e-01\nOshodi.Isolo        4.5278e-01 -7.3542e-04  1.1317e-01  1.3481e+00\nOsisioma.Ngwa       9.0282e-01 -2.5451e-03  2.4338e-01  1.8352e+00\nOsogbo              4.5355e-03 -2.0739e-05  2.2753e-03  9.5519e-02\nOturkpo             5.1133e-01 -6.8349e-04  6.5483e-02  2.0008e+00\nOvia.North.East    -2.4014e-02 -8.5213e-06  6.5185e-04 -9.4025e-01\nOvia.South.West    -1.1323e-01 -4.8859e-05  6.2616e-03 -1.4303e+00\nOwan.East          -3.1203e-02 -1.4228e-05  2.1911e-03 -6.6629e-01\nOwan.West           1.4445e-01 -1.6251e-03  2.4985e-01  2.9223e-01\nOwerri.Municipal   -2.6651e-01 -4.7580e-04  1.8381e-01 -6.2052e-01\nOwerri.North        4.8018e-01 -7.9461e-04  1.0176e-01  1.5078e+00\nOwerri.West         4.6955e-02 -1.1719e-05  1.5019e-03  1.2119e+00\nOwo                 3.6799e-03 -9.9922e-07  1.0963e-04  3.5156e-01\nOye                 4.2921e-01 -5.6868e-04  8.7526e-02  1.4527e+00\nOyi                 1.0979e+00 -1.5586e-03  2.3965e-01  2.2459e+00\nOyigbo             -4.7837e-01 -3.2575e-03  3.1129e-01 -8.5155e-01\nOyo.East            7.0319e-02 -2.2416e-04  1.9074e-02  5.1079e-01\nOyo.West            4.0366e-01 -1.0425e-03  1.1426e-01  1.1973e+00\nOyun                1.1780e-02 -4.4171e-05  4.8458e-03  1.6985e-01\nPaikoro             6.2135e-02 -6.6261e-05  5.6391e-03  8.2831e-01\nPankshin            2.2176e-01 -7.1085e-04  7.7933e-02  7.9693e-01\nPatani              5.2951e-01 -2.2156e-03  3.4044e-01  9.1131e-01\nPategi             -1.0824e-02 -8.3764e-05  1.0735e-02 -1.0366e-01\nPort.Harcourt       1.9845e+00 -3.3361e-03  6.4089e-01  2.4831e+00\nPotiskum            1.8013e+00 -3.8659e-03  9.9096e-01  1.8133e+00\nQua.an.Pan          2.9925e-01 -7.3606e-04  9.4268e-02  9.7705e-01\nRabah               1.2055e+00 -3.9396e-03  4.3051e-01  1.8433e+00\nRafi               -1.3687e-01 -8.0591e-04  1.2401e-01 -3.8637e-01\nRano                1.1708e+00 -1.6299e-03  2.5059e-01  2.3420e+00\nRemo.North          5.5663e-01 -1.1259e-03  1.7320e-01  1.3402e+00\nRijau              -4.8228e-02 -1.2298e-04  1.3491e-02 -4.1416e-01\nRimi                3.4353e-01 -2.4814e-04  3.8203e-02  1.7589e+00\nRimin.Gado          2.9510e+00 -4.9122e-03  7.5275e-01  3.4070e+00\nRingim              3.1035e+00 -4.8167e-03  6.1436e-01  3.9656e+00\nRiyom               7.1634e-02 -1.3641e-03  1.4945e-01  1.8882e-01\nRogo                4.2694e-01 -3.0659e-04  3.3626e-02  2.3299e+00\nRoni                8.9159e-01 -5.3027e-04  8.1618e-02  3.1227e+00\nSabon.Gari          1.1778e-02 -6.5872e-05  1.2696e-02  1.0512e-01\nSabon.Birni        -2.5800e-01 -4.0160e-04  1.0330e-01 -8.0147e-01\nSabuwa             -1.9063e-01 -1.5624e-03  3.0067e-01 -3.4481e-01\nSafana              1.5279e+00 -2.9431e-03  3.7609e-01  2.4963e+00\nSagbama             3.6141e-01 -9.5723e-04  8.1391e-02  1.2702e+00\nSakaba              1.6497e-02 -1.4599e-05  2.8139e-03  3.1128e-01\nSaki.East           4.1153e-03 -2.0208e-07  3.1120e-05  7.3774e-01\nSaki.West           3.2920e-03 -7.7581e-05  1.9962e-02  2.3849e-02\nSandamu             2.4992e-01 -2.5336e-04  3.2463e-02  1.3885e+00\nSanga              -6.9236e-03 -4.6791e-06  4.4860e-04 -3.2667e-01\nSapele              4.5973e-01 -6.0246e-04  1.1605e-01  1.3513e+00\nSardauna            1.7833e-01 -1.0545e-03  4.0715e-01  2.8114e-01\nShagamu             7.8458e-01 -2.8499e-03  3.6421e-01  1.3048e+00\nShagari            -3.6593e-02 -6.7407e-04  1.0374e-01 -1.1152e-01\nShanga             -2.3768e-01 -9.4861e-04  9.0860e-02 -7.8535e-01\nShani               1.1519e+00 -5.5599e-03  5.3008e-01  1.5898e+00\nShanono             1.2368e+00 -1.1135e-03  1.7128e-01  2.9911e+00\nShelleng            3.0315e-01 -7.2107e-05  7.9104e-03  3.4093e+00\nShendam             4.5650e-01 -1.2145e-03  1.3308e-01  1.2547e+00\nShinkafi            9.9721e-01 -1.4164e-03  3.6397e-01  1.6553e+00\nShira               1.1984e+00 -1.4673e-03  2.2563e-01  2.5260e+00\nShiroro            -5.3155e-02 -5.8084e-04  6.3688e-02 -2.0833e-01\nShomgom             6.4417e-02 -6.7705e-05  1.0426e-02  6.3154e-01\nShomolu             2.5701e-01 -1.1775e-04  2.2694e-02  1.7068e+00\nSilame             -1.7348e-01 -1.3987e-03  2.6921e-01 -3.3166e-01\nSoba                3.8766e-01 -3.1296e-04  2.9995e-02  2.2402e+00\nSokoto.North        9.8573e-01 -3.7271e-03  9.5552e-01  1.0122e+00\nSokoto.South        7.6251e-01 -1.5121e-03  2.9101e-01  1.4163e+00\nSong                1.1429e+00 -1.3987e-03  1.5323e-01  2.9233e+00\nSouthern.Ijaw       3.7478e-01 -1.6427e-03  1.7993e-01  8.8741e-01\nSule.Tankarkar      1.6353e+00 -2.9856e-03  3.8150e-01  2.6524e+00\nSuleja              2.6364e-01 -9.6430e-04  1.8569e-01  6.1406e-01\nSumaila             1.0763e+00 -1.2904e-03  2.4841e-01  2.1620e+00\nSuru                2.9934e-01 -1.7547e-03  2.6975e-01  5.7973e-01\nSurulere            1.1345e-01 -2.0538e-03  2.6269e-01  2.2537e-01\nSurulere.1         -4.8305e-03 -6.3536e-06  4.4127e-04 -2.2965e-01\nTafa               -1.5674e-01 -3.1339e-03  4.8111e-01 -2.2145e-01\nTafawa.Balewa       4.2687e-01 -2.2898e-03  1.7476e-01  1.0266e+00\nTai                -7.9051e-01 -6.0246e-04  9.2721e-02 -2.5941e+00\nTakai               1.6697e+00 -1.8629e-03  2.3831e-01  3.4241e+00\nTakum               9.8433e-02 -4.0639e-05  7.8328e-03  1.1126e+00\nTalata.Mafara       6.1213e-01 -3.8848e-04  7.4849e-02  2.2388e+00\nTambuwal           -4.7589e-02 -5.3062e-05  4.5158e-03 -7.0739e-01\nTangaza             2.1072e-02 -4.2740e-04  5.4754e-02  9.1880e-02\nTarauni             1.8439e+00 -3.7517e-03  7.2043e-01  2.1768e+00\nTarka              -1.9860e-01 -1.3260e-04  2.5554e-02 -1.2415e+00\nTarmua              9.3621e-01 -2.9070e-03  4.4637e-01  1.4056e+00\nTaura               2.7644e+00 -3.3665e-03  4.3001e-01  4.2207e+00\nTofa                3.3454e+00 -5.3620e-03  8.2130e-01  3.6973e+00\nToro                7.1332e-01 -1.5051e-03  1.1496e-01  2.1082e+00\nToto               -1.2819e-01 -1.8426e-04  2.3611e-02 -8.3303e-01\nToungo              3.5017e-01 -2.0099e-03  5.1617e-01  4.9019e-01\nTsafe               1.1143e+00 -1.7384e-03  3.3449e-01  1.9297e+00\nTsanyawa            1.2457e+00 -1.1752e-03  1.2878e-01  3.4744e+00\nTudun.Wada          2.8981e-01 -7.3776e-05  6.2785e-03  3.6584e+00\nTureta             -3.4713e-01 -2.3012e-04  2.5241e-02 -2.1835e+00\nUdenu               9.7248e-01 -1.6251e-03  2.4985e-01  1.9488e+00\nUdi                 6.8819e-01 -1.6096e-03  1.3677e-01  1.8652e+00\nUdu                -3.8727e-01 -4.2045e-04  8.1007e-02 -1.3592e+00\nUdung.Uko           6.2181e-01 -1.6862e-03  4.3318e-01  9.4733e-01\nUghelli.North      -2.2889e-01 -1.6525e-04  1.2639e-02 -2.0345e+00\nUghelli.South       1.4145e-01 -7.5472e-05  8.2796e-03  1.5554e+00\nUgwunagbo           1.3255e+00 -2.7184e-03  3.4745e-01  2.2533e+00\nUhunmwonde         -5.3382e-02 -1.4228e-05  1.8235e-03 -1.2497e+00\nUkanafun            3.4918e-01 -2.0961e-03  3.2211e-01  6.1894e-01\nUkum                5.2745e-01 -1.1317e-03  2.1788e-01  1.1324e+00\nUkwa.East           8.1377e-01 -1.4258e-03  1.5620e-01  2.0626e+00\nUkwa.West           3.8793e-01 -1.1927e-03  1.5268e-01  9.9585e-01\nUkwuani             2.6305e-01 -1.2643e-03  2.4339e-01  5.3576e-01\nUmu.Nneochi         1.3927e+00 -3.2725e-03  3.5786e-01  2.3336e+00\nUmuahia.North       3.4542e-01 -1.3975e-04  1.5330e-02  2.7910e+00\nUmuahia.South       1.4096e+00 -2.4565e-03  3.7737e-01  2.2986e+00\nUngogo              2.2199e+00 -3.8150e-03  3.2345e-01  3.9101e+00\nUnuimo              9.6932e-01 -2.4327e-03  2.6625e-01  1.8833e+00\nUruan               8.3367e-01 -2.4327e-03  3.1103e-01  1.4992e+00\nUrue.Offong.Oruko   6.3078e-01 -1.0001e-03  1.5386e-01  1.6107e+00\nUshongo             5.3566e-01 -1.1023e-03  1.4112e-01  1.4288e+00\nUssa                2.9539e-02 -1.7534e-05  4.5119e-03  4.4001e-01\nUvwie               3.2740e-02 -1.1259e-03  1.7320e-01  8.1375e-02\nUyo                 1.6978e-01 -8.2068e-05  6.2775e-03  2.1438e+00\nUzo.Uwani           1.6505e+00 -3.8697e-03  3.6956e-01  2.7214e+00\nVandeikya           4.7506e-01 -5.1871e-04  7.9839e-02  1.6831e+00\nWamako              4.9150e-02 -2.3240e-05  1.9779e-03  1.1057e+00\nWamba               5.2992e-02 -8.0594e-05  1.2410e-02  4.7641e-01\nWarawa              9.8578e-01 -1.1713e-03  1.2835e-01  2.7548e+00\nWarji               2.3394e+00 -3.0962e-03  5.9494e-01  3.0369e+00\nWarri.North         4.3425e-01 -1.5533e-03  1.3199e-01  1.1996e+00\nWarri.South         5.3541e-02 -6.8986e-06  8.8415e-04  1.8009e+00\nWarri.South.West    3.3186e-01 -2.7944e-03  4.2913e-01  5.1086e-01\nWasagu.Danko        3.2370e-01 -3.4214e-04  3.7524e-02  1.6728e+00\nWase                2.5920e-01 -3.2913e-04  5.0668e-02  1.1530e+00\nWudil               1.2425e+00 -1.3225e-03  1.4490e-01  3.2676e+00\nWukari              1.4230e-01 -1.3683e-04  1.5010e-02  1.1626e+00\nWurno               2.5426e-01 -3.6597e-04  7.0515e-02  9.5887e-01\nWushishi            3.5858e-02 -8.4462e-06  9.2665e-04  1.1782e+00\nYabo               -1.6639e-01 -3.2032e-04  4.1040e-02 -8.1977e-01\nYagba.East          1.5814e-01 -9.7746e-04  1.0713e-01  4.8612e-01\nYagba.West          1.7817e-01 -5.2346e-04  5.7400e-02  7.4587e-01\nYakurr             -5.8809e-02 -7.5530e-06  1.1631e-03 -1.7241e+00\nYala                4.5168e-01 -1.2609e-03  1.2073e-01  1.3036e+00\nYamaltu.Deba       -1.2372e-02 -9.3411e-07  1.0248e-04 -1.2221e+00\nYankwashi           1.1004e+00 -2.5891e-03  3.9769e-01  1.7491e+00\nYauri               2.6188e-02 -3.0090e-05  7.7429e-03  2.9796e-01\nYenegoa            -7.9178e-02 -6.4428e-05  8.2569e-03 -8.7064e-01\nYola.North          1.0930e+00 -3.2960e-03  1.2697e+00  9.7291e-01\nYola.South         -2.2420e-01 -3.0090e-05  4.6337e-03 -3.2932e+00\nYorro               8.1742e-02 -1.9749e-04  2.5306e-02  5.1509e-01\nYunusari           -6.3915e-01 -5.5599e-03  1.0657e+00 -6.1375e-01\nYusufari            2.4040e+00 -3.2338e-03  4.9639e-01  3.4167e+00\nZaki                2.2405e+00 -3.1685e-03  3.4652e-01  3.8115e+00\nZango               8.1240e-01 -2.0600e-03  3.9625e-01  1.2939e+00\nZango.Kataf         9.2058e-01 -4.5298e-03  5.7792e-01  1.2169e+00\nZaria              -1.1490e-02 -1.7587e-05  3.3898e-03 -1.9705e-01\nZing                1.6022e-01 -6.4913e-05  2.5087e-02  1.0120e+00\nZurmi               7.1187e-01 -5.6918e-04  5.4537e-02  3.0507e+00\nZuru                1.9558e-01 -2.9662e-04  5.7156e-02  8.1931e-01\n                   Pr.z....E.Ii..\nAba.North                  0.0221\nAba.South                  0.0635\nAbadam                     0.0003\nAbaji                      0.6905\nAbak                       0.1424\nAbakaliki                  0.0326\nAbeokuta.North             0.0455\nAbeokuta.South             0.1278\nAbi                        0.2270\nAboh.Mbaise                0.0075\nAbua.Odual                 0.2421\nAbuja.Municipal            0.3303\nAdavi                      0.8166\nAdo                        0.1405\nAdo.Odo.Ota                0.3073\nAdo.Ekiti                  0.6002\nAfijio                     0.3418\nAfikpo.North               0.1451\nAfikpo.South               0.0235\nAgaie                      0.2458\nAgatu                      0.1068\nAgege                      0.6392\nAguata                     0.0042\nAgwara                     0.9782\nAhiazu.Mbaise              0.0215\nAhoada.East                0.0691\nAhoada.West                0.7667\nAiyedade                   0.2322\nAiyedire                   0.9682\nAiyekire..Gbonyin.         0.7424\nAjaokuta                   0.7959\nAjeromi.Ifelodun           0.6466\nAjingi                     0.0001\nAkamkpa                    0.0486\nAkinyele                   0.4843\nAkko                       0.7737\nAkoko.Edo                  0.4698\nAkoko.North.East           0.4524\nAkoko.North.West           0.9091\nAkoko.South.East           0.5357\nAkoko.South.West           0.3914\nAkpabuyo                   0.0739\nAkuku.Toru                 0.7326\nAkure.North                0.7021\nAkure.South                0.6209\nAkwanga                    0.7010\nAlbasu                     0.0005\nAleiro                     0.4601\nAlimosho                   0.7509\nAlkaleri                   0.7422\nAmuwo.Odofin               0.7608\nAnambra.East               0.0332\nAnambra.West               0.0201\nAnaocha                    0.0002\nAndoni                     0.1805\nAninri                     0.0538\nAniocha.North              0.1606\nAniocha.South              0.8650\nAnka                       0.1045\nAnkpa                      0.0380\nApa                        0.0081\nApapa                      0.0926\nArdo.Kola                  0.7872\nArewa.Dandi                0.7634\nArgungu                    0.3260\nArochukwu                  0.0567\nAsa                        0.9181\nAsari.Toru                 0.3868\nAskira.Uba                 0.6207\nAtakumosa.East             0.5164\nAtakumosa.West             0.6806\nAtiba                      0.0682\nAtigbo                     0.5591\nAugie                      0.8169\nAuyo                       0.0000\nAwe                        0.2556\nAwgu                       0.0095\nAwka.North                 0.0079\nAwka.South                 0.0173\nAyamelum                   0.0159\nBabura                     0.0328\nBadagry                    0.1224\nBade                       0.0027\nBagudo                     0.2550\nBagwai                     0.0002\nBakassi                       NaN\nBakori                     0.0096\nBakura                     0.0812\nBalanga                    0.0696\nBali                       0.4563\nBama                       0.0058\nBarikin.Ladi               0.0924\nBaruten                    0.8764\nBassa                      0.3625\nBassa.1                    0.5690\nBatagarawa                 0.0594\nBatsari                    0.0709\nBauchi                     0.0376\nBaure                      0.0035\nBayo                       0.0305\nBebeji                     0.0256\nBekwara                    0.1577\nBende                      0.0055\nBiase                      0.0680\nBichi                      0.0001\nBida                       0.5851\nBilliri                    0.3808\nBindawa                    0.0075\nBinji                      0.6528\nBiriniwa                   0.0001\nBirni.Kudu                 0.0000\nBirnin.Gwari               0.9375\nBirnin.Kebbi               0.8169\nBirnin.Magaji              0.0080\nBiu                        0.5628\nBodinga                    0.8578\nBogoro                     0.7539\nBoki                       0.0962\nBokkos                     0.5293\nBoluwaduro                 0.8178\nBomadi                     0.0558\nBonny                      0.1190\nBorgu                      0.7645\nBoripe                     0.8264\nBosso                      0.6810\nBrass                      0.2426\nBuji                       0.0064\nBukkuyum                   0.2065\nBungudu                    0.0152\nBunkure                    0.0043\nBunza                      0.3038\nBursari                    0.0037\nBuruku                     0.1369\nBurutu                     0.0314\nBwari                      0.7633\nCalabar.Municipal          0.1109\nCalabar.South              0.2003\nChanchaga                  0.3249\nCharanchi                  0.0381\nChibok                     0.4570\nChikun                     0.5216\nDala                       0.0028\nDamaturu                   0.8264\nDamban                     0.0667\nDambatta                   0.0007\nDamboa                     0.2618\nDan.Musa                   0.0015\nDandi                      0.9259\nDandume                    0.6300\nDange.Shuni                0.0652\nDanja                      0.0916\nDarazo                     0.2393\nDass                       0.0872\nDaura                      0.4311\nDawakin.Kudu               0.0064\nDawakin.Tofa               0.0000\nDegema                     0.0013\nDekina                     0.0570\nDemsa                      0.0388\nDikwa                      0.0001\nDoguwa                     0.0091\nDoma                       0.2551\nDonga                      0.3502\nDukku                      0.9821\nDunukofia                  0.0119\nDutse                      0.0000\nDutsi                      0.3167\nDutsin.Ma                  0.0045\nEastern.Obolo              0.5161\nEbonyi                     0.5471\nEdati                      0.4499\nEde.North                  0.9625\nEde.South                  0.9721\nEdu                        0.8138\nEfon                       0.7898\nEgbado.North               0.3768\nEgbado.South               0.0202\nEgbeda                     0.4778\nEgbedore                   0.8097\nEgor                       0.9480\nEhime.Mbano                0.0473\nEjigbo                     0.8786\nEkeremor                   0.0969\nEket                       0.3174\nEkiti                      0.0504\nEkiti.East                 0.3092\nEkiti.South.West           0.2066\nEkiti.West                 0.1709\nEkwusigo                   0.0102\nEleme                      0.0044\nEmohua                     0.0490\nEmure                      0.9617\nEnugu.East                 0.1542\nEnugu.North                0.2308\nEnugu.South                0.6018\nEpe                        0.7037\nEsan.Central               0.6101\nEsan.North.East            0.1552\nEsan.South.East            0.5575\nEsan.West                  0.2861\nEse.Odo                    0.2717\nEsit...Eket                0.1874\nEssien.Udim                0.0340\nEtche                      0.1460\nEthiope.East               0.3557\nEthiope.West               0.1468\nEti.Osa                    0.4997\nEtim.Ekpo                  0.0165\nEtinan                     0.4726\nEtsako.Central             0.3596\nEtsako.East                0.2870\nEtsako.West                0.3372\nEtung                      0.2128\nEwekoro                    0.4520\nEzeagu                     0.0023\nEzinihitte                 0.0128\nEzza.North                 0.1654\nEzza.South                 0.1485\nFagge                      0.0222\nFakai                      0.9617\nFaskari                    0.1083\nFika                       0.8282\nFufore                     0.0457\nFunakaye                   0.6522\nFune                       0.0045\nFuntua                     0.1177\nGabasawa                   0.0007\nGada                       0.5514\nGagarawa                   0.0014\nGamawa                     0.0303\nGanjuwa                    0.0666\nGanye                      0.1405\nGarki                      0.0000\nGarko                      0.0114\nGarum.Mallam               0.0063\nGashaka                    0.8388\nGassol                     0.8644\nGaya                       0.0093\nGbako                      0.1810\nGboko                      0.4117\nGeidam                     0.4363\nGezawa                     0.0026\nGiade                      0.0320\nGirei                      0.0107\nGiwa                       0.7418\nGokana                     0.0783\nGombe                      0.5107\nGombi                      0.0022\nGoronyo                    0.1092\nGubio                      0.0014\nGudu                       0.7652\nGujba                      0.4781\nGulani                     0.6800\nGuma                       0.6760\nGumel                      0.0122\nGummi                      0.2449\nGurara                     0.2927\nGuri                       0.0001\nGusau                      0.0106\nGuyuk                      0.0204\nGuzamala                   0.0000\nGwadabawa                  0.9255\nGwagwalada                 0.9478\nGwale                      0.0189\nGwandu                     0.3896\nGwaram                     0.0012\nGwarzo                     0.0068\nGwer.East                  0.5480\nGwer.West                  0.3547\nGwiwa                      0.0191\nGwoza                      0.0058\nHadejia                    0.0065\nHawul                      0.0025\nHong                       0.9676\nIbadan.North               0.8286\nIbadan.North.East          0.7886\nIbadan.North.West          0.4078\nIbadan.South.East          0.8646\nIbadan.South.West          0.6568\nIbaji                      0.0925\nIbarapa.Central            0.0886\nIbarapa.East               0.1441\nIbarapa.North              0.1335\nIbeju.Lekki                0.5064\nIbeno                      0.0970\nIbesikpo.Asutan            0.1638\nIbi                        0.1440\nIbiono.Ibom                0.1575\nIdah                       0.2882\nIdanre                     0.6628\nIdeato.North               0.0025\nIdeato.South               0.0908\nIdemili.North              0.0240\nIdemili.South              0.0033\nIdo                        0.5041\nIdo.Osi                    0.0486\nIfako.Ijaye                0.9468\nIfe.Central                0.7327\nIfe.East                   0.6963\nIfe.North                  0.1962\nIfe.South                  0.3652\nIfedayo                    0.2112\nIfedore                    0.7532\nIfelodun                   0.6414\nIfelodun.1                 0.8511\nIfo                        0.8509\nIgabi                      0.5589\nIgalamela.Odolu            0.0206\nIgbo.Etiti                 0.0116\nIgbo.Eze.North             0.1660\nIgbo.Eze.South             0.1607\nIgueben                    0.2454\nIhiala                     0.0016\nIhitte.Uboma               0.1329\nIjebu.East                 0.1714\nIjebu.North                0.0636\nIjebu.North.East           0.2315\nIjebu.Ode                  0.2316\nIjero                      0.1991\nIjumu                      0.3365\nIka                        0.0631\nIka.North.East             0.1209\nIka.South                  0.4928\nIkara                      0.0149\nIkeduru                    0.0666\nIkeja                      0.2354\nIkenne                     0.1473\nIkere                      0.7931\nIkole                      0.2937\nIkom                       0.0505\nIkono                      0.1561\nIkorodu                    0.3143\nIkot.Abasi                 0.1552\nIkot.Ekpene                0.2163\nIkpoba.Okha                0.4787\nIkwerre                    0.8067\nIkwo                       0.5190\nIkwuano                    0.0281\nIla                        0.6397\nIlaje                      0.2645\nIle.Oluji.Okeigbo          0.4199\nIlejemeji                  0.1697\nIlesha.East                0.7155\nIlesha.West                0.7739\nIllela                     0.8851\nIlorin.East                0.4416\nIlorin.South               0.3750\nIlorin.West                0.3020\nImeko.Afon                 0.4136\nIngawa                     0.0021\nIni                        0.0282\nIpokia                     0.5126\nIrele                      0.2392\nIrepo                      0.6731\nIrepodun                   0.7396\nIrepodun.1                 0.6987\nIrepodun.Ifelodun          0.2367\nIrewole                    0.4406\nIsa                        0.1969\nIse.Orun                   0.5176\nIseyin                     0.3506\nIshielu                    0.1055\nIsi.Uzo                    0.0559\nIsiala.Ngwa.North          0.0147\nIsiala.Ngwa.South          0.0016\nIsiala.Mbano               0.0076\nIsin                       0.7220\nIsiukwuato                 0.0223\nIsokan                     0.1232\nIsoko.North                0.7802\nIsoko.South                0.2624\nIsu                        0.0199\nItas.Gadau                 0.0002\nItesiwaju                  0.3299\nItu                        0.2159\nIvo                        0.0247\nIwajowa                    0.1713\nIwo                        0.6712\nIzzi                       0.4599\nJaba                       0.4579\nJada                       0.0320\nJahun                      0.0000\nJakusko                    0.0011\nJalingo                    0.9342\nJama.are                   0.0318\nJega                       0.7210\nJema.a                     0.6684\nJere                       0.1638\nJibia                      0.1483\nJos.East                   0.9437\nJos.North                  0.4767\nJos.South                  0.1373\nKabba.Bunu                 0.5701\nKabo                       0.0009\nKachia                     0.9529\nKaduna.North               0.5034\nKaduna.South               0.0459\nKafin.Hausa                0.0002\nKafur                      0.0194\nKaga                       0.8123\nKagarko                    0.4792\nKaiama                     0.5553\nKaita                      0.2559\nKajola                     0.6282\nKajuru                     0.3104\nKala.Balge                 0.0003\nKalgo                      0.4583\nKaltungo                   0.9934\nKanam                      0.4688\nKankara                    0.0005\nKanke                      0.7659\nKankia                     0.0007\nKano.Municipal             0.0028\nKarasuwa                   0.0005\nKaraye                     0.0107\nKarim.Lamido               0.5681\nKaru                       0.9124\nKatagum                    0.0687\nKatcha                     0.3685\nKatsina                    0.2857\nKatsina.Ala                0.0674\nKaugama                    0.0000\nKaura                      0.1850\nKaura.Namoda               0.0841\nKauru                      0.5801\nKazaure                    0.0052\nKeana                      0.5243\nKebbe                      0.6414\nKeffi                      0.7006\nKhana                      0.9111\nKibiya                     0.0436\nKirfi                      0.4087\nKiri.Kasamma               0.0005\nKiru                       0.0074\nKiyawa                     0.0003\nKogi                       0.4642\nKoko.Besse                 0.9852\nKokona                     0.2127\nKolokuma.Opokuma           0.2021\nKonduga                    0.0001\nKonshisha                  0.2336\nKontagora                  0.6665\nKosofe                     0.7408\nKubau                      0.0309\nKudan                      0.1814\nKuje                       0.9558\nKukawa                     0.0003\nKumbotso                   0.0000\nKunchi                     0.0108\nKura                       0.0258\nKurfi                      0.0272\nKurmi                      0.6315\nKusada                     0.0146\nKwali                      0.7345\nKwami                      0.3357\nKwande                     0.1392\nKware                      0.0596\nKwaya.Kusar                0.0006\nLafia                      0.7033\nLagelu                     0.8382\nLagos.Island               0.9790\nLagos.Mainland             0.5330\nLamurde                    0.4781\nLangtang.North             0.0620\nLangtang.South             0.4421\nLapai                      0.9242\nLau                        0.0297\nLavun                      0.9993\nLere                       0.0452\nLogo                       0.1348\nLokoja                     0.8526\nMachina                    0.0007\nMadagali                   0.3604\nMadobi                     0.0005\nMafa                       0.0019\nMagama                     0.8868\nMagumeri                   0.1042\nMai.adua                   0.5181\nMaiduguri                  0.6188\nMaigatari                  0.0019\nMaiha                      0.2931\nMaiyama                    0.2873\nMakoda                     0.0013\nMakurdi                    0.1587\nMalam.Madori               0.0041\nMalumfashi                 0.0010\nMangu                      0.2996\nMani                       0.0497\nMaradun                    0.0008\nMariga                     0.7775\nMarkafi                    0.2510\nMarte                      0.0000\nMaru                       0.1366\nMashegu                    0.2405\nMashi                      0.2996\nMatazu                     0.0083\nMayo.Belwa                 0.1236\nMbaitoli                   0.0012\nMbo                        0.0829\nMichika                    0.0998\nMiga                       0.0001\nMikang                     0.2304\nMinjibir                   0.0001\nMisau                      0.2219\nMkpat.Enin                 0.0544\nMoba                       0.1260\nMobbar                     0.0055\nMokwa                      0.2042\nMonguno                    0.0000\nMopa.Muro                  0.5720\nMoro                       0.4158\nMubi.North                 0.5211\nMubi.South                 0.9666\nMusawa                     0.0005\nMushin                     0.1051\nMuya                       0.7264\nNafada                     0.7695\nNangere                    0.0193\nNasarawa                   0.0007\nNasarawa.1                 0.5460\nNasarawa.Eggon             0.2962\nNdokwa.East                0.4921\nNdokwa.West                0.3359\nNembe                      0.6340\nNgala                      0.0003\nNganzai                    0.0149\nNgaski                     0.9956\nNgor.Okpala                0.1494\nNguru                      0.0010\nNingi                      0.0022\nNjaba                      0.0593\nNjikoka                    0.0232\nNkanu.East                 0.2388\nNkanu.West                 0.6867\nNkwerre                    0.0053\nNnewi.North                0.0021\nNnewi.South                0.0013\nNsit.Atai                  0.2172\nNsit.Ibom                  0.3702\nNsit.Ubium                 0.1302\nNsukka                     0.0069\nNuman                      0.1176\nNwangele                   0.0767\nObafemi.Owode              0.0089\nObanliku                   0.2365\nObi                        0.9591\nObi.1                      0.6221\nObi.Ngwa                   0.0013\nObia.Akpor                 0.0069\nObokun                     0.4745\nObot.Akara                 0.0178\nObowo                      0.0369\nObubra                     0.0343\nObudu                      0.0561\nOdeda                      0.6476\nOdigbo                     0.2236\nOdo.Otin                   0.6016\nOdogbolu                   0.0574\nOdukpani                   0.0032\nOffa                       0.8532\nOfu                        0.1307\nOgba.Egbema.Ndoni          0.9819\nOgbadibo                   0.0443\nOgbaru                     0.0021\nOgbia                      0.7230\nOgbomosho.North            0.8206\nOgbomosho.South            0.7602\nOgo.Oluwa                  0.9255\nOgoja                      0.0921\nOgori.Magongo              0.9553\nOgu.Bolo                   0.0192\nOgun.waterside             0.0982\nOguta                      0.0961\nOhafia                     0.0205\nOhaji.Egbema               0.8362\nOhaozara                   0.0749\nOhaukwu                    0.2096\nOhimini                    0.1060\nOji.River                  0.0010\nOjo                        0.5570\nOju                        0.1150\nOke.Ero                    0.3133\nOkehi                      0.8398\nOkene                      0.6142\nOkigwe                     0.0089\nOkitipupa                  0.3435\nOkobo                      0.0792\nOkpe                       0.2466\nOkpokwu                    0.0654\nOkrika                     0.0002\nOla.oluwa                  0.8556\nOlamabolo                  0.1382\nOlorunda                   0.5099\nOlorunsogo                 0.7322\nOluyole                    0.1857\nOmala                      0.1036\nOmumma                     0.0349\nOna.Ara                    0.4502\nOndo.East                  0.3360\nOndo.West                  0.1286\nOnicha                     0.1651\nOnitsha.North              0.0840\nOnitsha.South              0.2272\nOnna                       0.1332\nOpobo.Nkoro                0.2652\nOredo                      0.8921\nOrelope                    0.7624\nOrhionmwon                 0.2114\nOri.Ire                    0.9824\nOriade                     0.2415\nOrlu                       0.0197\nOrolu                      0.8764\nOron                       0.0683\nOrsu                       0.0052\nOru.East                   0.0048\nOru.West                   0.0208\nOruk.Anam                  0.2388\nOrumba.North               0.0048\nOrumba.South               0.0012\nOse                        0.4466\nOshimili.North             0.3172\nOshimili.South             0.6991\nOshodi.Isolo               0.1776\nOsisioma.Ngwa              0.0665\nOsogbo                     0.9239\nOturkpo                    0.0454\nOvia.North.East            0.3471\nOvia.South.West            0.1526\nOwan.East                  0.5052\nOwan.West                  0.7701\nOwerri.Municipal           0.5349\nOwerri.North               0.1316\nOwerri.West                0.2256\nOwo                        0.7252\nOye                        0.1463\nOyi                        0.0247\nOyigbo                     0.3945\nOyo.East                   0.6095\nOyo.West                   0.2312\nOyun                       0.8651\nPaikoro                    0.4075\nPankshin                   0.4255\nPatani                     0.3621\nPategi                     0.9174\nPort.Harcourt              0.0130\nPotiskum                   0.0698\nQua.an.Pan                 0.3285\nRabah                      0.0653\nRafi                       0.6992\nRano                       0.0192\nRemo.North                 0.1802\nRijau                      0.6788\nRimi                       0.0786\nRimin.Gado                 0.0007\nRingim                     0.0001\nRiyom                      0.8502\nRogo                       0.0198\nRoni                       0.0018\nSabon.Gari                 0.9163\nSabon.Birni                0.4229\nSabuwa                     0.7302\nSafana                     0.0126\nSagbama                    0.2040\nSakaba                     0.7556\nSaki.East                  0.4607\nSaki.West                  0.9810\nSandamu                    0.1650\nSanga                      0.7439\nSapele                     0.1766\nSardauna                   0.7786\nShagamu                    0.1920\nShagari                    0.9112\nShanga                     0.4323\nShani                      0.1119\nShanono                    0.0028\nShelleng                   0.0007\nShendam                    0.2096\nShinkafi                   0.0979\nShira                      0.0115\nShiroro                    0.8350\nShomgom                    0.5277\nShomolu                    0.0879\nSilame                     0.7401\nSoba                       0.0251\nSokoto.North               0.3114\nSokoto.South               0.1567\nSong                       0.0035\nSouthern.Ijaw              0.3749\nSule.Tankarkar             0.0080\nSuleja                     0.5392\nSumaila                    0.0306\nSuru                       0.5621\nSurulere                   0.8217\nSurulere.1                 0.8184\nTafa                       0.8247\nTafawa.Balewa              0.3046\nTai                        0.0095\nTakai                      0.0006\nTakum                      0.2659\nTalata.Mafara              0.0252\nTambuwal                   0.4793\nTangaza                    0.9268\nTarauni                    0.0295\nTarka                      0.2144\nTarmua                     0.1598\nTaura                      0.0000\nTofa                       0.0002\nToro                       0.0350\nToto                       0.4048\nToungo                     0.6240\nTsafe                      0.0536\nTsanyawa                   0.0005\nTudun.Wada                 0.0003\nTureta                     0.0290\nUdenu                      0.0513\nUdi                        0.0621\nUdu                        0.1741\nUdung.Uko                  0.3435\nUghelli.North              0.0419\nUghelli.South              0.1199\nUgwunagbo                  0.0242\nUhunmwonde                 0.2114\nUkanafun                   0.5360\nUkum                       0.2575\nUkwa.East                  0.0392\nUkwa.West                  0.3193\nUkwuani                    0.5921\nUmu.Nneochi                0.0196\nUmuahia.North              0.0053\nUmuahia.South              0.0215\nUngogo                     0.0001\nUnuimo                     0.0597\nUruan                      0.1338\nUrue.Offong.Oruko          0.1073\nUshongo                    0.1530\nUssa                       0.6599\nUvwie                      0.9351\nUyo                        0.0320\nUzo.Uwani                  0.0065\nVandeikya                  0.0924\nWamako                     0.2689\nWamba                      0.6338\nWarawa                     0.0059\nWarji                      0.0024\nWarri.North                0.2303\nWarri.South                0.0717\nWarri.South.West           0.6094\nWasagu.Danko               0.0944\nWase                       0.2489\nWudil                      0.0011\nWukari                     0.2450\nWurno                      0.3376\nWushishi                   0.2387\nYabo                       0.4123\nYagba.East                 0.6269\nYagba.West                 0.4557\nYakurr                     0.0847\nYala                       0.1924\nYamaltu.Deba               0.2217\nYankwashi                  0.0803\nYauri                      0.7657\nYenegoa                    0.3839\nYola.North                 0.3306\nYola.South                 0.0010\nYorro                      0.6065\nYunusari                   0.5394\nYusufari                   0.0006\nZaki                       0.0001\nZango                      0.1957\nZango.Kataf                0.2236\nZaria                      0.8438\nZing                       0.3116\nZurmi                      0.0023\nZuru                       0.4126\n\n\nMapping the local Moran’s I\n\nnigeria_sf26391.localMI <- cbind(nigeria_sf26391,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nMapping local Moran’s I values\n\ntm_shape(nigeria_sf26391.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nMapping local Moran’s I p-value\n\ntm_shape(nigeria_sf26391.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMapping both local Moran’s I values and p-values\n\nlocalMI.map <- tm_shape(nigeria_sf26391.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(nigeria_sf26391.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n\nnci <- moran.plot(nigeria_sf26391$`functional_ratio`, rswm_q, zero.policy = TRUE,\n                  labels=as.character(nigeria_sf26391$`shapeName`), \n                  xlab=\"functional waterpoint ratio\", \n                  ylab=\"Spatially Lag z-functional waterpoint ratio\")\n\n\n\n\n\n\n\n\nnigeria_sf26391$Z.functional_ratio <- scale(nigeria_sf26391$functional_ratio) %>% as.vector \n\n\nnci2 <- moran.plot(nigeria_sf26391$Z.functional_ratio, rswm_q,zero.policy = TRUE,\n                   labels=as.character(nigeria_sf26391$`shapeName`),\n                   xlab=\"z-functional waterpoint ratio\", \n                   ylab=\"Spatially Lag z-functional waterpoint ratio\")\n\n\n\n\n\n\n\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nDV <- nigeria_sf26391$`functional_ratio` - mean(nigeria_sf26391$`functional_ratio`)     \n\n\nC_mI <- localMI[,1] - mean(localMI[,1])    \n\n\nsignif <- 0.05       \n\n\nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 1      \nquadrant[DV <0 & C_mI>0] <- 2\nquadrant[DV >0 & C_mI<0] <- 3\n\n\nquadrant[localMI[,5]>signif] <- 0\n\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nDV <- nigeria_sf26391$`functional_ratio` - mean(nigeria_sf26391$`functional_ratio`)     \nC_mI <- localMI[,1] - mean(localMI[,1])    \nsignif <- 0.05       \nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 1      \nquadrant[DV <0 & C_mI>0] <- 2\nquadrant[DV >0 & C_mI<0] <- 3\nquadrant[localMI[,5]>signif] <- 0\n\n\n\n\n\nnigeria_sf26391.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nigeria_sf26391.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\nfuntionWater <- qtm(nigeria_sf26391, \"functional_ratio\")\n\nnigeria_sf26391.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(nigeria_sf26391.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(funtionWater, LISAmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nlongitude <- map_dbl(nigeria_sf26391$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude<- map_dbl(nigeria_sf26391$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)\n\n\n\n\n\n#coords <- coordinates(nigeria_sf26391)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\n\nWarning in nbdists(k1, coords, longlat = TRUE): Coordinates are not\ngeographical: longlat argument wrong\n\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    314    6428   10200   10153   14119   19632 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 19632, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\n\nwm_d19632 <- dnearneigh(coords, 0, 19632, longlat = TRUE)\n\nWarning in dnearneigh(coords, 0, 19632, longlat = TRUE): Coordinates are not\ngeographical: longlat argument wrong\n\nwm_d19632\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 597124 \nPercentage nonzero weights: 99.67416 \nAverage number of links: 771.478 \n\n\n\nwm619632_lw <- nb2listw(wm_d19632, style = 'B')\nsummary(wm619632_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 597124 \nPercentage nonzero weights: 99.67416 \nAverage number of links: 771.478 \nLink number distribution:\n\n755 756 757 758 759 760 761 762 764 765 766 767 768 769 770 771 772 773 \n  5   4   3   7   4   3   4   5   3   2   3   2   6  21  29  83 226 364 \n5 least connected regions:\n289 302 333 464 658 with 755 links\n364 most connected regions:\nwith 773 links\n\nWeights style: B \nWeights constants summary:\n    n     nn     S0      S1         S2\nB 774 599076 597124 1194248 1842702976\n\n\n\n\n\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n  8 \n774 \n774 least connected regions:\nwith 8 links\n774 most connected regions:\nwith 8 links\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0    S1     S2\nB 774 599076 6192 11154 201940\n\n\n\n\n\n\n\n\n\nfips <- order(nigeria_sf26391$shapeName)\ngi.fixed <- localG(nigeria_sf26391$`functional_ratio`, wm619632_lw)\ngi.fixed\n\n  [1]          NaN  1.377708165 -0.240859679         -Inf  0.133194305\n  [6]  0.855076692  0.935034005          NaN         -Inf         -Inf\n [11]  0.733610557         -Inf          NaN         -Inf         -Inf\n [16] -0.169852463         -Inf -0.707935679         -Inf         -Inf\n [21]  0.137687543         -Inf         -Inf -0.852281822  0.240595351\n [26]         -Inf -0.396981438  0.260541486 -2.018186184          NaN\n [31] -0.714970764  1.114705955 -2.075802452          NaN  0.083769093\n [36]          NaN         -Inf  1.392783798          NaN         -Inf\n [41] -1.074521139  0.758185309         -Inf  0.520415780  0.752979773\n [46] -0.696779707         -Inf -0.601974372          NaN  0.324049132\n [51]         -Inf         -Inf  0.064632663  0.312289406          NaN\n [56]  0.879298254         -Inf          NaN  0.573466260         -Inf\n [61]         -Inf         -Inf  2.058769554         -Inf  0.678436196\n [66] -0.951840694          NaN         -Inf  0.574612644 -1.080148691\n [71]         -Inf  0.244370297         -Inf  0.836184266         -Inf\n [76]          NaN  0.701289306 -0.005019617          NaN  0.112515954\n [81] -0.570941518  0.192095085         -Inf  0.281417737 -1.074293829\n [86]  0.306846908  1.384916381  0.657677460  0.438699402         -Inf\n [91]         -Inf         -Inf         -Inf -0.390190995         -Inf\n [96] -2.072662767  0.249149511         -Inf          NaN -0.225090619\n[101]         -Inf          NaN         -Inf          NaN         -Inf\n[106]         -Inf         -Inf         -Inf          NaN         -Inf\n[111]  0.527795152         -Inf -0.108742982  1.401448616  1.299501513\n[116]         -Inf         -Inf          NaN         -Inf         -Inf\n[121]         -Inf         -Inf         -Inf          NaN  0.011223320\n[126]  0.080848862 -0.572639904 -1.307184483          NaN -0.761247023\n[131]  0.869971374 -1.830400684  0.737717168          NaN          NaN\n[136] -0.059475503         -Inf          NaN         -Inf -0.954599326\n[141]         -Inf -1.964711618         -Inf          NaN         -Inf\n[146]         -Inf         -Inf         -Inf -1.170538146          NaN\n[151]         -Inf -0.512125210         -Inf         -Inf         -Inf\n[156]  0.134484039  0.967789647 -1.476053145         -Inf         -Inf\n[161]         -Inf          NaN         -Inf         -Inf          NaN\n[166] -0.044591624  0.542317581  1.541922544  1.037556877         -Inf\n[171]  1.589247648 -1.965126019 -0.076662377 -0.911278385 -1.446629475\n[176]         -Inf  0.747314069 -1.079860721         -Inf -1.039025158\n[181]          NaN          NaN  0.154672039  0.078176090         -Inf\n[186]  0.114278291         -Inf          NaN  0.442329212  0.198069496\n[191]  0.951838166         -Inf -0.433637876 -0.535364414 -1.038771212\n[196]  0.914160168         -Inf  0.879214218  0.542895605  0.340630581\n[201] -0.617183590         -Inf  0.385315224         -Inf  1.129475988\n[206]  0.440571553         -Inf          NaN  0.509441008 -0.062754094\n[211]  0.636608037          NaN -0.266218117          NaN         -Inf\n[216] -0.855984039          NaN          NaN         -Inf         -Inf\n[221]         -Inf         -Inf  1.209120336         -Inf -0.534484487\n[226] -1.103407379 -1.449429659 -0.302351949         -Inf         -Inf\n[231]         -Inf          NaN         -Inf  0.489810281         -Inf\n[236]  0.544434837  0.463393618 -0.076925153 -2.072336770  0.327487511\n[241]         -Inf          NaN  1.048537309         -Inf  0.377358933\n[246] -0.170055437  0.377486134         -Inf         -Inf         -Inf\n[251]  2.755773318  0.442883856         -Inf -0.911606154  0.658097207\n[256] -0.639931119 -0.132720252         -Inf         -Inf         -Inf\n[261]  1.591173445 -0.867324007         -Inf  0.887773516  1.204640306\n[266]         -Inf         -Inf  0.273553736         -Inf         -Inf\n[271]  0.306846908         -Inf -1.082018043  1.274675685  0.095420294\n[276]  0.117558906 -1.200510515         -Inf -1.097426145 -0.784650689\n[281]         -Inf  0.367036250          NaN  0.772763727         -Inf\n[286]  0.058273878         -Inf  2.856565853 -0.536515611  1.614014619\n[291]  0.509593766  0.562236951         -Inf         -Inf -0.841671944\n[296]         -Inf         -Inf  1.656023126 -0.005936142         -Inf\n[301] -1.008844621 -0.536179637         -Inf -1.586019464         -Inf\n[306]  0.665508326         -Inf -0.915983136         -Inf -1.121853985\n[311]  0.494240258 -0.490420196         -Inf         -Inf  0.113764988\n[316]         -Inf         -Inf         -Inf  1.366524361 -1.651523801\n[321] -1.728897769  2.061918896         -Inf -2.172818618         -Inf\n[326]  0.249526890 -0.159736648 -0.273636675 -0.269611097         -Inf\n[331]          NaN          NaN  0.915425015         -Inf  0.662652606\n[336]         -Inf          NaN  1.505044548         -Inf         -Inf\n[341]  0.308103184         -Inf -0.445835337 -0.547617765  0.889730430\n[346]  0.369516222         -Inf -1.663868128  0.635917837  0.397735874\n[351]         -Inf         -Inf -0.850406971 -1.080089722  0.065251022\n[356]  0.064711087  0.137322364         -Inf         -Inf -1.245186787\n[361]         -Inf  0.147363909         -Inf  0.116522934         -Inf\n[366]  1.049631643  0.275310143 -0.272422252          NaN         -Inf\n[371]         -Inf  0.903296572  0.336759556 -0.440783751 -0.436625080\n[376] -1.177199133          NaN -0.258572134         -Inf         -Inf\n[381]         -Inf  0.901652847         -Inf         -Inf         -Inf\n[386]         -Inf         -Inf         -Inf  1.712430404         -Inf\n[391]  0.437691117  2.061843489 -0.188590768 -1.041930530         -Inf\n[396]         -Inf  1.590672933         -Inf -1.934574732         -Inf\n[401] -2.071586716 -1.277012206          NaN         -Inf         -Inf\n[406] -2.074814893         -Inf         -Inf  0.032363889         -Inf\n[411]  0.146604244         -Inf -0.488366366         -Inf  0.411616800\n[416] -0.224862795         -Inf         -Inf -0.064500950          NaN\n[421] -0.330665850 -1.310519420          NaN  0.914548013         -Inf\n[426]         -Inf         -Inf  0.726156662         -Inf -0.694965495\n[431] -0.228918807  0.542937354 -0.657826127  0.026385411 -2.397273554\n[436]  2.059605610         -Inf         -Inf -1.273011881  2.058604012\n[441] -0.905837978          NaN  0.172476522 -0.241386537         -Inf\n[446]         -Inf -0.072511133         -Inf         -Inf -0.570841505\n[451]         -Inf          NaN  0.265936374         -Inf  0.680047650\n[456]          NaN         -Inf -0.790042313          NaN         -Inf\n[461]         -Inf         -Inf  0.134478340  0.937278460  2.062567669\n[466]         -Inf          NaN -1.558542053 -1.868986992  0.637645689\n[471]  0.928433568 -0.333441797         -Inf         -Inf         -Inf\n[476]         -Inf         -Inf  0.081558322 -2.393586777  1.712464119\n[481]         -Inf -1.633498124  0.690117979  0.661845833         -Inf\n[486] -2.075924947 -1.328005403          NaN         -Inf  0.479798816\n[491] -0.119661685         -Inf         -Inf  0.493403976         -Inf\n[496]         -Inf  0.536839366         -Inf         -Inf -1.404360698\n[501]  0.089528020 -1.562268785         -Inf         -Inf         -Inf\n[506]         -Inf  1.092612565         -Inf  0.993348457  0.953678009\n[511]         -Inf  0.785079086         -Inf  0.896470269         -Inf\n[516]  0.249958974  0.079770314 -0.110160659         -Inf  0.484901321\n[521]         -Inf  0.748481599 -1.339995911  0.789054136 -0.694141385\n[526]  0.851630846         -Inf         -Inf         -Inf -1.473177447\n[531]         -Inf  0.153399386 -1.413369171  1.400713667  0.581799376\n[536]         -Inf  0.507802872         -Inf -0.114690168         -Inf\n[541]         -Inf -1.511284621 -1.224290904  1.164842735         -Inf\n[546] -0.222213206         -Inf         -Inf  0.569684145  0.102963471\n[551]  0.224581436  0.803968364         -Inf         -Inf         -Inf\n[556]         -Inf         -Inf         -Inf  0.132217235         -Inf\n[561]         -Inf  1.164614529 -0.720560562         -Inf  1.119053736\n[566]         -Inf         -Inf         -Inf -1.304775902  0.928333127\n[571] -0.828828821  0.652557852         -Inf  0.856414314         -Inf\n[576]         -Inf         -Inf         -Inf  0.404220809         -Inf\n[581] -0.629056200  0.143788793 -0.048346374 -0.249498231         -Inf\n[586]         -Inf         -Inf         -Inf  0.028634239  0.811147967\n[591]         -Inf  0.654560931  1.428676264  0.438865415  0.706285209\n[596]  1.561226531  0.242388749         -Inf  0.394095006  0.304260564\n[601] -0.285324972  1.305429788         -Inf         -Inf -1.964083140\n[606]         -Inf -0.571210607  0.080151713         -Inf  1.385294434\n[611]  0.529760318  0.106920648  0.082805461         -Inf -0.061750298\n[616]  0.663318665         -Inf  0.505284605  0.274635514         -Inf\n[621] -0.435450994         -Inf         -Inf         -Inf         -Inf\n[626] -0.199209456 -0.355119941         -Inf         -Inf  0.733176951\n[631]         -Inf  0.936262458         -Inf -0.304564861         -Inf\n[636]  0.504978706 -0.142764081         -Inf -1.464780975         -Inf\n[641] -0.357476226 -0.284697359 -0.375706965         -Inf  1.469145128\n[646] -1.310034565 -1.520607759         -Inf -0.239770048 -2.037673816\n[651]  0.521495414 -0.228238601  0.848738835         -Inf  0.781735936\n[656]  1.560568523 -1.128940698 -0.542995477 -0.863047001  1.449663295\n[661]         -Inf         -Inf -0.821664584         -Inf -0.984749484\n[666]         -Inf         -Inf  0.902206064         -Inf -1.097749044\n[671] -1.038678236         -Inf         -Inf         -Inf         -Inf\n[676]  0.853816543  0.174673934 -2.494777544         -Inf         -Inf\n[681]  0.307841684         -Inf         -Inf  1.232289342         -Inf\n[686]  0.695304044         -Inf         -Inf         -Inf         -Inf\n[691] -1.520321794  0.375747284 -1.332549227         -Inf         -Inf\n[696] -0.749892423         -Inf -1.230268821         -Inf  0.014128575\n[701]  0.748458994         -Inf -1.527698892  0.967944908         -Inf\n[706]         -Inf -1.127387248         -Inf  0.080992223         -Inf\n[711]         -Inf -0.120775523 -1.793148073  0.092446680 -0.856383648\n[716]         -Inf -1.125614239  0.970589268 -0.226652966 -1.363404933\n[721]  0.559445524  0.491646742         -Inf         -Inf -0.387863869\n[726]  0.987038702  2.061440696 -1.471665466 -0.569340695  0.373940018\n[731]         -Inf         -Inf -0.262528176         -Inf         -Inf\n[736]         -Inf  0.470054719  0.079926127         -Inf  0.735217002\n[741]         -Inf -0.048088595         -Inf -1.367784951         -Inf\n[746]         -Inf -1.605177397 -1.939783144  0.604763675  0.652716622\n[751] -0.866645095         -Inf  0.519893369  0.327559357         -Inf\n[756] -0.728124646         -Inf  2.061435370 -0.402606741  0.527849645\n[761] -2.071608324  1.075698082         -Inf         -Inf  0.801283763\n[766] -1.477368094         -Inf         -Inf         -Inf         -Inf\n[771]         -Inf  0.702709656         -Inf         -Inf\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  Low  Low  Low  High High Low  High Low  Low  Low  Low \n [16] Low  Low  Low  Low  High Low  High Low  High Low  Low  High Low  High Low \n [31] Low  High High Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  High\n [46] High High High High High High Low  Low  Low  Low  Low  Low  High High Low \n [61] Low  Low  High High High Low  High High High Low  Low  Low  Low  High High\n [76] High Low  Low  Low  Low  High Low  High High High Low  High High High High\n [91] Low  Low  High Low  Low  High High High High High High Low  Low  Low  High\n[106] High Low  High Low  High High Low  High High High High High Low  Low  Low \n[121] Low  High High Low  High Low  High High High High Low  High Low  Low  Low \n[136] Low  Low  Low  High High Low  High High Low  High Low  High Low  High High\n[151] High High High Low  High High High Low  High Low  High High Low  Low  High\n[166] High High High Low  Low  High High Low  Low  Low  Low  High Low  Low  Low \n[181] Low  High Low  High Low  High Low  Low  Low  High High Low  High High Low \n[196] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low \n[211] Low  High Low  Low  Low  Low  Low  Low  High High High High High Low  High\n[226] High High High High High High High High High High Low  Low  High High Low \n[241] Low  High High High Low  High Low  High Low  Low  Low  Low  High Low  High\n[256] High Low  High High High Low  High High High High High High Low  Low  High\n[271] Low  High High High High High High High High Low  Low  Low  Low  Low  Low \n[286] Low  High Low  Low  Low  Low  Low  Low  Low  High Low  High Low  Low  Low \n[301] Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[316] Low  Low  High Low  Low  Low  High Low  High Low  High Low  Low  Low  Low \n[331] Low  High Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low \n[346] High High High Low  High Low  Low  Low  Low  Low  Low  Low  Low  High High\n[361] Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  High High Low \n[376] Low  Low  High Low  Low  High High High Low  High High Low  High High Low \n[391] High Low  Low  High High Low  High High High Low  Low  High High Low  High\n[406] Low  Low  High Low  High Low  High High High High Low  High High Low  High\n[421] Low  High High High High High Low  High High High High Low  High High High\n[436] Low  Low  High High High Low  High High High Low  Low  Low  High High High\n[451] High Low  High High Low  Low  High High High Low  High High High Low  Low \n[466] High Low  High High Low  High High Low  High Low  High High High High High\n[481] High Low  High High High High Low  High High Low  High Low  High Low  High\n[496] High High Low  Low  High High Low  High High Low  Low  Low  High Low  Low \n[511] High Low  Low  High High High Low  High High Low  High Low  Low  Low  Low \n[526] Low  High Low  High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[541] Low  High Low  Low  Low  Low  Low  Low  High High Low  Low  Low  Low  Low \n[556] Low  Low  High Low  Low  Low  High Low  Low  High High Low  High Low  Low \n[571] High High Low  Low  High Low  Low  Low  Low  Low  High Low  Low  High Low \n[586] Low  Low  Low  Low  High High Low  High Low  Low  Low  High Low  Low  Low \n[601] Low  Low  Low  Low  High High Low  Low  Low  Low  Low  Low  High Low  Low \n[616] Low  Low  Low  Low  Low  High Low  High Low  High Low  High High High Low \n[631] High Low  Low  Low  Low  Low  High Low  Low  Low  High Low  Low  High High\n[646] High Low  High High High Low  Low  High High High Low  High High High Low \n[661] Low  High Low  High Low  Low  High High Low  Low  Low  High Low  High High\n[676] High Low  High High High High High High High High High High Low  High High\n[691] High Low  High Low  High High Low  High Low  High Low  Low  High High High\n[706] High High High High High High High High Low  Low  Low  High Low  High Low \n[721] Low  High Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[736] Low  Low  Low  Low  Low  High High High High Low  Low  Low  High Low  High\n[751] Low  High High Low  Low  Low  High Low  Low  High Low  Low  High Low  High\n[766] High High High High High High High High High\nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nigeria_sf26391$functional_ratio, listw = wm619632_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\n\nnigeria.gi <- cbind(nigeria_sf26391, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\n\n\nfuntionWater <- qtm(nigeria_sf26391, \"functional_ratio\")\n\nGimap <-tm_shape(nigeria.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(funtionWater, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nfips <- order(nigeria_sf26391$shapeName)\ngi.adaptive <- localG(nigeria_sf26391$`functional_ratio`, knn_lw)\nnigeria.gi <- cbind(nigeria_sf26391, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\n\nfuntionWater<- qtm(nigeria_sf26391, \"functional_ratio\")\n\nGimap <- tm_shape(nigeria.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(funtionWater, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  }
]